// tslint:disable
/**
 * localhost
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import * as runtime from '../runtime';
import { AttachmentFromJSON, CategoryFromJSON, CommentFromJSON, CustomTaxonomyFromJSON, EventCalendarEventsFromJSON, MenuFromJSON, MenuDataFromJSON, MenuItemFromJSON, MenuLocationFromJSON, MenuLocationDataFromJSON, PageFromJSON, PageRevisionFromJSON, PostFromJSON, PostRevisionFromJSON, RenderedBlockFromJSON, SearchResultFromJSON, SettingsFromJSON, StatusFromJSON, TagFromJSON, TaxonomyFromJSON, ThemeFromJSON, TreeMenuFromJSON, TypeFromJSON, UserFromJSON, WpBlockFromJSON, WpBlockRevisionFromJSON, } from '../models';
/**
 * no description
 */
var DefaultApi = /** @class */ (function (_super) {
    __extends(DefaultApi, _super);
    function DefaultApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     */
    DefaultApi.prototype.deleteWpV2BlocksByIdRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.id === null || requestParameters.id === undefined) {
                            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling deleteWpV2BlocksById.');
                        }
                        queryParameters = {};
                        if (requestParameters.force !== undefined) {
                            queryParameters['force'] = requestParameters.force;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/wp/v2/blocks/{id}".replace("{" + "id" + "}", encodeURIComponent(String(requestParameters.id))),
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return WpBlockFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.deleteWpV2BlocksById = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteWpV2BlocksByIdRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.deleteWpV2CategoriesByIdRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.id === null || requestParameters.id === undefined) {
                            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling deleteWpV2CategoriesById.');
                        }
                        queryParameters = {};
                        if (requestParameters.force !== undefined) {
                            queryParameters['force'] = requestParameters.force;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/wp/v2/categories/{id}".replace("{" + "id" + "}", encodeURIComponent(String(requestParameters.id))),
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return CategoryFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.deleteWpV2CategoriesById = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteWpV2CategoriesByIdRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.deleteWpV2CommentsByIdRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.id === null || requestParameters.id === undefined) {
                            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling deleteWpV2CommentsById.');
                        }
                        queryParameters = {};
                        if (requestParameters.force !== undefined) {
                            queryParameters['force'] = requestParameters.force;
                        }
                        if (requestParameters.password !== undefined) {
                            queryParameters['password'] = requestParameters.password;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/wp/v2/comments/{id}".replace("{" + "id" + "}", encodeURIComponent(String(requestParameters.id))),
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return CommentFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.deleteWpV2CommentsById = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteWpV2CommentsByIdRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.deleteWpV2MediaByIdRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.id === null || requestParameters.id === undefined) {
                            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling deleteWpV2MediaById.');
                        }
                        queryParameters = {};
                        if (requestParameters.force !== undefined) {
                            queryParameters['force'] = requestParameters.force;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/wp/v2/media/{id}".replace("{" + "id" + "}", encodeURIComponent(String(requestParameters.id))),
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return AttachmentFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.deleteWpV2MediaById = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteWpV2MediaByIdRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.deleteWpV2PagesByIdRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.id === null || requestParameters.id === undefined) {
                            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling deleteWpV2PagesById.');
                        }
                        queryParameters = {};
                        if (requestParameters.force !== undefined) {
                            queryParameters['force'] = requestParameters.force;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/wp/v2/pages/{id}".replace("{" + "id" + "}", encodeURIComponent(String(requestParameters.id))),
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return PageFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.deleteWpV2PagesById = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteWpV2PagesByIdRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.deleteWpV2PagesByParentRevisionsByIdRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.parent === null || requestParameters.parent === undefined) {
                            throw new runtime.RequiredError('parent', 'Required parameter requestParameters.parent was null or undefined when calling deleteWpV2PagesByParentRevisionsById.');
                        }
                        if (requestParameters.id === null || requestParameters.id === undefined) {
                            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling deleteWpV2PagesByParentRevisionsById.');
                        }
                        queryParameters = {};
                        if (requestParameters.parent2 !== undefined) {
                            queryParameters['parent'] = requestParameters.parent2;
                        }
                        if (requestParameters.force !== undefined) {
                            queryParameters['force'] = requestParameters.force;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/wp/v2/pages/{parent}/revisions/{id}".replace("{" + "parent" + "}", encodeURIComponent(String(requestParameters.parent))).replace("{" + "id" + "}", encodeURIComponent(String(requestParameters.id))),
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return PageRevisionFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.deleteWpV2PagesByParentRevisionsById = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteWpV2PagesByParentRevisionsByIdRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.deleteWpV2PostsByIdRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.id === null || requestParameters.id === undefined) {
                            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling deleteWpV2PostsById.');
                        }
                        queryParameters = {};
                        if (requestParameters.force !== undefined) {
                            queryParameters['force'] = requestParameters.force;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/wp/v2/posts/{id}".replace("{" + "id" + "}", encodeURIComponent(String(requestParameters.id))),
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return PostFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.deleteWpV2PostsById = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteWpV2PostsByIdRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.deleteWpV2PostsByParentRevisionsByIdRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.parent === null || requestParameters.parent === undefined) {
                            throw new runtime.RequiredError('parent', 'Required parameter requestParameters.parent was null or undefined when calling deleteWpV2PostsByParentRevisionsById.');
                        }
                        if (requestParameters.id === null || requestParameters.id === undefined) {
                            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling deleteWpV2PostsByParentRevisionsById.');
                        }
                        queryParameters = {};
                        if (requestParameters.parent2 !== undefined) {
                            queryParameters['parent'] = requestParameters.parent2;
                        }
                        if (requestParameters.force !== undefined) {
                            queryParameters['force'] = requestParameters.force;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/wp/v2/posts/{parent}/revisions/{id}".replace("{" + "parent" + "}", encodeURIComponent(String(requestParameters.parent))).replace("{" + "id" + "}", encodeURIComponent(String(requestParameters.id))),
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return PostRevisionFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.deleteWpV2PostsByParentRevisionsById = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteWpV2PostsByParentRevisionsByIdRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.deleteWpV2TagsByIdRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.id === null || requestParameters.id === undefined) {
                            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling deleteWpV2TagsById.');
                        }
                        queryParameters = {};
                        if (requestParameters.force !== undefined) {
                            queryParameters['force'] = requestParameters.force;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/wp/v2/tags/{id}".replace("{" + "id" + "}", encodeURIComponent(String(requestParameters.id))),
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return TagFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.deleteWpV2TagsById = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteWpV2TagsByIdRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.deleteWpV2UsersByIdRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.id === null || requestParameters.id === undefined) {
                            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling deleteWpV2UsersById.');
                        }
                        if (requestParameters.reassign === null || requestParameters.reassign === undefined) {
                            throw new runtime.RequiredError('reassign', 'Required parameter requestParameters.reassign was null or undefined when calling deleteWpV2UsersById.');
                        }
                        queryParameters = {};
                        if (requestParameters.force !== undefined) {
                            queryParameters['force'] = requestParameters.force;
                        }
                        if (requestParameters.reassign !== undefined) {
                            queryParameters['reassign'] = requestParameters.reassign;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/wp/v2/users/{id}".replace("{" + "id" + "}", encodeURIComponent(String(requestParameters.id))),
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return UserFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.deleteWpV2UsersById = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteWpV2UsersByIdRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.deleteWpV2UsersMeRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.reassign === null || requestParameters.reassign === undefined) {
                            throw new runtime.RequiredError('reassign', 'Required parameter requestParameters.reassign was null or undefined when calling deleteWpV2UsersMe.');
                        }
                        queryParameters = {};
                        if (requestParameters.force !== undefined) {
                            queryParameters['force'] = requestParameters.force;
                        }
                        if (requestParameters.reassign !== undefined) {
                            queryParameters['reassign'] = requestParameters.reassign;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/wp/v2/users/me",
                                method: 'DELETE',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return UserFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.deleteWpV2UsersMe = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.deleteWpV2UsersMeRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getEventCalendarEventsRaw = function () {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        headerParameters = {};
                        return [4 /*yield*/, this.request({
                                path: "/tribe/events/v1/events",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return EventCalendarEventsFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getEventCalendarEvents = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getEventCalendarEventsRaw()];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getMainMenuRaw = function () {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/wp/v2/mainMenu",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return jsonValue.map(MenuItemFromJSON); })];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getMainMenu = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getMainMenuRaw()];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getMenusV1LocationsRaw = function () {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/menus/v1/locations",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return jsonValue.map(MenuLocationFromJSON); })];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getMenusV1Locations = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getMenusV1LocationsRaw()];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getMenusV1LocationsByIdRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.id === null || requestParameters.id === undefined) {
                            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getMenusV1LocationsById.');
                        }
                        queryParameters = {};
                        if (requestParameters.lang !== undefined) {
                            queryParameters['lang'] = requestParameters.lang;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/menus/v1/locations/{id}".replace("{" + "id" + "}", encodeURIComponent(String(requestParameters.id))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return MenuLocationDataFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getMenusV1LocationsById = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getMenusV1LocationsByIdRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getMenusV1MenusRaw = function () {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/menus/v1/menus",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return jsonValue.map(MenuFromJSON); })];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getMenusV1Menus = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getMenusV1MenusRaw()];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getMenusV1MenusByIdRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.id === null || requestParameters.id === undefined) {
                            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getMenusV1MenusById.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/menus/v1/menus/{id}".replace("{" + "id" + "}", encodeURIComponent(String(requestParameters.id))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return MenuDataFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getMenusV1MenusById = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getMenusV1MenusByIdRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getPostThumbnailRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.id !== undefined) {
                            queryParameters['id'] = requestParameters.id;
                        }
                        if (requestParameters.slug !== undefined) {
                            queryParameters['slug'] = requestParameters.slug;
                        }
                        if (requestParameters.post_type !== undefined) {
                            queryParameters['postType'] = requestParameters.post_type;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/wp/v2/postThumbnail",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.TextApiResponse(response)];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getPostThumbnail = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getPostThumbnailRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getTreeMenuRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.slug === null || requestParameters.slug === undefined) {
                            throw new runtime.RequiredError('slug', 'Required parameter requestParameters.slug was null or undefined when calling getTreeMenu.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/wp/v2/treeMenu?slug={slug}".replace("{" + "slug" + "}", encodeURIComponent(String(requestParameters.slug))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return TreeMenuFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getTreeMenu = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getTreeMenuRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getWpV2BlockRendererByNameRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling getWpV2BlockRendererByName.');
                        }
                        queryParameters = {};
                        if (requestParameters.name2 !== undefined) {
                            queryParameters['name'] = requestParameters.name2;
                        }
                        if (requestParameters.context !== undefined) {
                            queryParameters['context'] = requestParameters.context;
                        }
                        if (requestParameters.attributes !== undefined) {
                            queryParameters['attributes'] = requestParameters.attributes;
                        }
                        if (requestParameters.post_id !== undefined) {
                            queryParameters['post_id'] = requestParameters.post_id;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/wp/v2/block-renderer/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return RenderedBlockFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getWpV2BlockRendererByName = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getWpV2BlockRendererByNameRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getWpV2BlocksRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.context !== undefined) {
                            queryParameters['context'] = requestParameters.context;
                        }
                        if (requestParameters.page !== undefined) {
                            queryParameters['page'] = requestParameters.page;
                        }
                        if (requestParameters.per_page !== undefined) {
                            queryParameters['per_page'] = requestParameters.per_page;
                        }
                        if (requestParameters.search !== undefined) {
                            queryParameters['search'] = requestParameters.search;
                        }
                        if (requestParameters.after !== undefined) {
                            queryParameters['after'] = requestParameters.after.toISOString();
                        }
                        if (requestParameters.before !== undefined) {
                            queryParameters['before'] = requestParameters.before.toISOString();
                        }
                        if (requestParameters.exclude) {
                            queryParameters['exclude'] = requestParameters.exclude;
                        }
                        if (requestParameters.include) {
                            queryParameters['include'] = requestParameters.include;
                        }
                        if (requestParameters.offset !== undefined) {
                            queryParameters['offset'] = requestParameters.offset;
                        }
                        if (requestParameters.order !== undefined) {
                            queryParameters['order'] = requestParameters.order;
                        }
                        if (requestParameters.orderby !== undefined) {
                            queryParameters['orderby'] = requestParameters.orderby;
                        }
                        if (requestParameters.slug) {
                            queryParameters['slug'] = requestParameters.slug;
                        }
                        if (requestParameters.status !== undefined) {
                            queryParameters['status'] = requestParameters.status;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/wp/v2/blocks",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return jsonValue.map(WpBlockFromJSON); })];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getWpV2Blocks = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getWpV2BlocksRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getWpV2BlocksByIdRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.id === null || requestParameters.id === undefined) {
                            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getWpV2BlocksById.');
                        }
                        queryParameters = {};
                        if (requestParameters.context !== undefined) {
                            queryParameters['context'] = requestParameters.context;
                        }
                        if (requestParameters.password !== undefined) {
                            queryParameters['password'] = requestParameters.password;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/wp/v2/blocks/{id}".replace("{" + "id" + "}", encodeURIComponent(String(requestParameters.id))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return WpBlockFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getWpV2BlocksById = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getWpV2BlocksByIdRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getWpV2BlocksByIdAutosavesRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.id === null || requestParameters.id === undefined) {
                            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getWpV2BlocksByIdAutosaves.');
                        }
                        queryParameters = {};
                        if (requestParameters.parent !== undefined) {
                            queryParameters['parent'] = requestParameters.parent;
                        }
                        if (requestParameters.context !== undefined) {
                            queryParameters['context'] = requestParameters.context;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/wp/v2/blocks/{id}/autosaves".replace("{" + "id" + "}", encodeURIComponent(String(requestParameters.id))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return jsonValue.map(WpBlockRevisionFromJSON); })];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getWpV2BlocksByIdAutosaves = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getWpV2BlocksByIdAutosavesRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getWpV2BlocksByParentAutosavesByIdRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.parent === null || requestParameters.parent === undefined) {
                            throw new runtime.RequiredError('parent', 'Required parameter requestParameters.parent was null or undefined when calling getWpV2BlocksByParentAutosavesById.');
                        }
                        if (requestParameters.id === null || requestParameters.id === undefined) {
                            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getWpV2BlocksByParentAutosavesById.');
                        }
                        queryParameters = {};
                        if (requestParameters.parent2 !== undefined) {
                            queryParameters['parent'] = requestParameters.parent2;
                        }
                        if (requestParameters.context !== undefined) {
                            queryParameters['context'] = requestParameters.context;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/wp/v2/blocks/{parent}/autosaves/{id}".replace("{" + "parent" + "}", encodeURIComponent(String(requestParameters.parent))).replace("{" + "id" + "}", encodeURIComponent(String(requestParameters.id))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return WpBlockRevisionFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getWpV2BlocksByParentAutosavesById = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getWpV2BlocksByParentAutosavesByIdRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getWpV2CategoriesRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.context !== undefined) {
                            queryParameters['context'] = requestParameters.context;
                        }
                        if (requestParameters.page !== undefined) {
                            queryParameters['page'] = requestParameters.page;
                        }
                        if (requestParameters.per_page !== undefined) {
                            queryParameters['per_page'] = requestParameters.per_page;
                        }
                        if (requestParameters.search !== undefined) {
                            queryParameters['search'] = requestParameters.search;
                        }
                        if (requestParameters.exclude) {
                            queryParameters['exclude'] = requestParameters.exclude;
                        }
                        if (requestParameters.include) {
                            queryParameters['include'] = requestParameters.include;
                        }
                        if (requestParameters.order !== undefined) {
                            queryParameters['order'] = requestParameters.order;
                        }
                        if (requestParameters.orderby !== undefined) {
                            queryParameters['orderby'] = requestParameters.orderby;
                        }
                        if (requestParameters.hide_empty !== undefined) {
                            queryParameters['hide_empty'] = requestParameters.hide_empty;
                        }
                        if (requestParameters.parent !== undefined) {
                            queryParameters['parent'] = requestParameters.parent;
                        }
                        if (requestParameters.post !== undefined) {
                            queryParameters['post'] = requestParameters.post;
                        }
                        if (requestParameters.slug) {
                            queryParameters['slug'] = requestParameters.slug;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/wp/v2/categories",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return jsonValue.map(CategoryFromJSON); })];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getWpV2Categories = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getWpV2CategoriesRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getWpV2CategoriesByIdRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.id === null || requestParameters.id === undefined) {
                            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getWpV2CategoriesById.');
                        }
                        queryParameters = {};
                        if (requestParameters.context !== undefined) {
                            queryParameters['context'] = requestParameters.context;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/wp/v2/categories/{id}".replace("{" + "id" + "}", encodeURIComponent(String(requestParameters.id))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return CategoryFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getWpV2CategoriesById = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getWpV2CategoriesByIdRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getWpV2CommentsRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.context !== undefined) {
                            queryParameters['context'] = requestParameters.context;
                        }
                        if (requestParameters.page !== undefined) {
                            queryParameters['page'] = requestParameters.page;
                        }
                        if (requestParameters.per_page !== undefined) {
                            queryParameters['per_page'] = requestParameters.per_page;
                        }
                        if (requestParameters.search !== undefined) {
                            queryParameters['search'] = requestParameters.search;
                        }
                        if (requestParameters.after !== undefined) {
                            queryParameters['after'] = requestParameters.after.toISOString();
                        }
                        if (requestParameters.author) {
                            queryParameters['author'] = requestParameters.author;
                        }
                        if (requestParameters.author_exclude) {
                            queryParameters['author_exclude'] = requestParameters.author_exclude;
                        }
                        if (requestParameters.author_email !== undefined) {
                            queryParameters['author_email'] = requestParameters.author_email;
                        }
                        if (requestParameters.before !== undefined) {
                            queryParameters['before'] = requestParameters.before.toISOString();
                        }
                        if (requestParameters.exclude) {
                            queryParameters['exclude'] = requestParameters.exclude;
                        }
                        if (requestParameters.include) {
                            queryParameters['include'] = requestParameters.include;
                        }
                        if (requestParameters.offset !== undefined) {
                            queryParameters['offset'] = requestParameters.offset;
                        }
                        if (requestParameters.order !== undefined) {
                            queryParameters['order'] = requestParameters.order;
                        }
                        if (requestParameters.orderby !== undefined) {
                            queryParameters['orderby'] = requestParameters.orderby;
                        }
                        if (requestParameters.parent) {
                            queryParameters['parent'] = requestParameters.parent;
                        }
                        if (requestParameters.parent_exclude) {
                            queryParameters['parent_exclude'] = requestParameters.parent_exclude;
                        }
                        if (requestParameters.post) {
                            queryParameters['post'] = requestParameters.post;
                        }
                        if (requestParameters.status !== undefined) {
                            queryParameters['status'] = requestParameters.status;
                        }
                        if (requestParameters.type !== undefined) {
                            queryParameters['type'] = requestParameters.type;
                        }
                        if (requestParameters.password !== undefined) {
                            queryParameters['password'] = requestParameters.password;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/wp/v2/comments",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return jsonValue.map(CommentFromJSON); })];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getWpV2Comments = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getWpV2CommentsRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getWpV2CommentsByIdRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.id === null || requestParameters.id === undefined) {
                            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getWpV2CommentsById.');
                        }
                        queryParameters = {};
                        if (requestParameters.context !== undefined) {
                            queryParameters['context'] = requestParameters.context;
                        }
                        if (requestParameters.password !== undefined) {
                            queryParameters['password'] = requestParameters.password;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/wp/v2/comments/{id}".replace("{" + "id" + "}", encodeURIComponent(String(requestParameters.id))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return CommentFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getWpV2CommentsById = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getWpV2CommentsByIdRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getWpV2CustomTaxonomyRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling getWpV2CustomTaxonomy.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/wp/v2/taxonomy/{name}".replace("{" + "name" + "}", encodeURIComponent(String(requestParameters.name))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return jsonValue.map(CustomTaxonomyFromJSON); })];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getWpV2CustomTaxonomy = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getWpV2CustomTaxonomyRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getWpV2MediaRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.context !== undefined) {
                            queryParameters['context'] = requestParameters.context;
                        }
                        if (requestParameters.page !== undefined) {
                            queryParameters['page'] = requestParameters.page;
                        }
                        if (requestParameters.per_page !== undefined) {
                            queryParameters['per_page'] = requestParameters.per_page;
                        }
                        if (requestParameters.search !== undefined) {
                            queryParameters['search'] = requestParameters.search;
                        }
                        if (requestParameters.after !== undefined) {
                            queryParameters['after'] = requestParameters.after.toISOString();
                        }
                        if (requestParameters.author) {
                            queryParameters['author'] = requestParameters.author;
                        }
                        if (requestParameters.author_exclude) {
                            queryParameters['author_exclude'] = requestParameters.author_exclude;
                        }
                        if (requestParameters.before !== undefined) {
                            queryParameters['before'] = requestParameters.before.toISOString();
                        }
                        if (requestParameters.exclude) {
                            queryParameters['exclude'] = requestParameters.exclude;
                        }
                        if (requestParameters.include) {
                            queryParameters['include'] = requestParameters.include;
                        }
                        if (requestParameters.offset !== undefined) {
                            queryParameters['offset'] = requestParameters.offset;
                        }
                        if (requestParameters.order !== undefined) {
                            queryParameters['order'] = requestParameters.order;
                        }
                        if (requestParameters.orderby !== undefined) {
                            queryParameters['orderby'] = requestParameters.orderby;
                        }
                        if (requestParameters.parent) {
                            queryParameters['parent'] = requestParameters.parent;
                        }
                        if (requestParameters.parent_exclude) {
                            queryParameters['parent_exclude'] = requestParameters.parent_exclude;
                        }
                        if (requestParameters.slug) {
                            queryParameters['slug'] = requestParameters.slug;
                        }
                        if (requestParameters.status !== undefined) {
                            queryParameters['status'] = requestParameters.status;
                        }
                        if (requestParameters.media_type !== undefined) {
                            queryParameters['media_type'] = requestParameters.media_type;
                        }
                        if (requestParameters.mime_type !== undefined) {
                            queryParameters['mime_type'] = requestParameters.mime_type;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/wp/v2/media",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return jsonValue.map(AttachmentFromJSON); })];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getWpV2Media = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getWpV2MediaRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getWpV2MediaByIdRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.id === null || requestParameters.id === undefined) {
                            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getWpV2MediaById.');
                        }
                        queryParameters = {};
                        if (requestParameters.context !== undefined) {
                            queryParameters['context'] = requestParameters.context;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/wp/v2/media/{id}".replace("{" + "id" + "}", encodeURIComponent(String(requestParameters.id))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return AttachmentFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getWpV2MediaById = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getWpV2MediaByIdRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getWpV2PagesRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.context !== undefined) {
                            queryParameters['context'] = requestParameters.context;
                        }
                        if (requestParameters.categories) {
                            queryParameters['categories'] = requestParameters.categories;
                        }
                        if (requestParameters.taxonomy_academy) {
                            queryParameters['taxonomy_academy'] = requestParameters.taxonomy_academy;
                        }
                        if (requestParameters.page !== undefined) {
                            queryParameters['page'] = requestParameters.page;
                        }
                        if (requestParameters.per_page !== undefined) {
                            queryParameters['per_page'] = requestParameters.per_page;
                        }
                        if (requestParameters.search !== undefined) {
                            queryParameters['search'] = requestParameters.search;
                        }
                        if (requestParameters.after !== undefined) {
                            queryParameters['after'] = requestParameters.after.toISOString();
                        }
                        if (requestParameters.author) {
                            queryParameters['author'] = requestParameters.author;
                        }
                        if (requestParameters.author_exclude) {
                            queryParameters['author_exclude'] = requestParameters.author_exclude;
                        }
                        if (requestParameters.before !== undefined) {
                            queryParameters['before'] = requestParameters.before.toISOString();
                        }
                        if (requestParameters.exclude) {
                            queryParameters['exclude'] = requestParameters.exclude;
                        }
                        if (requestParameters.include) {
                            queryParameters['include'] = requestParameters.include;
                        }
                        if (requestParameters.menu_order !== undefined) {
                            queryParameters['menu_order'] = requestParameters.menu_order;
                        }
                        if (requestParameters.offset !== undefined) {
                            queryParameters['offset'] = requestParameters.offset;
                        }
                        if (requestParameters.order !== undefined) {
                            queryParameters['order'] = requestParameters.order;
                        }
                        if (requestParameters.orderby !== undefined) {
                            queryParameters['orderby'] = requestParameters.orderby;
                        }
                        if (requestParameters.parent) {
                            queryParameters['parent'] = requestParameters.parent;
                        }
                        if (requestParameters.parent_exclude) {
                            queryParameters['parent_exclude'] = requestParameters.parent_exclude;
                        }
                        if (requestParameters.slug) {
                            queryParameters['slug'] = requestParameters.slug;
                        }
                        if (requestParameters.lang) {
                            queryParameters['lang'] = requestParameters.lang;
                        }
                        if (requestParameters.status !== undefined) {
                            queryParameters['status'] = requestParameters.status;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/wp/v2/pages",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return jsonValue.map(PageFromJSON); })];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getWpV2Pages = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getWpV2PagesRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getWpV2PagesByIdRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.id === null || requestParameters.id === undefined) {
                            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getWpV2PagesById.');
                        }
                        queryParameters = {};
                        if (requestParameters.context !== undefined) {
                            queryParameters['context'] = requestParameters.context;
                        }
                        if (requestParameters.password !== undefined) {
                            queryParameters['password'] = requestParameters.password;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/wp/v2/pages/{id}".replace("{" + "id" + "}", encodeURIComponent(String(requestParameters.id))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return PageFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getWpV2PagesById = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getWpV2PagesByIdRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getWpV2PagesByIdAutosavesRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.id === null || requestParameters.id === undefined) {
                            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getWpV2PagesByIdAutosaves.');
                        }
                        queryParameters = {};
                        if (requestParameters.parent !== undefined) {
                            queryParameters['parent'] = requestParameters.parent;
                        }
                        if (requestParameters.context !== undefined) {
                            queryParameters['context'] = requestParameters.context;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/wp/v2/pages/{id}/autosaves".replace("{" + "id" + "}", encodeURIComponent(String(requestParameters.id))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return jsonValue.map(PageRevisionFromJSON); })];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getWpV2PagesByIdAutosaves = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getWpV2PagesByIdAutosavesRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getWpV2PagesByParentAutosavesByIdRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.parent === null || requestParameters.parent === undefined) {
                            throw new runtime.RequiredError('parent', 'Required parameter requestParameters.parent was null or undefined when calling getWpV2PagesByParentAutosavesById.');
                        }
                        if (requestParameters.id === null || requestParameters.id === undefined) {
                            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getWpV2PagesByParentAutosavesById.');
                        }
                        queryParameters = {};
                        if (requestParameters.parent2 !== undefined) {
                            queryParameters['parent'] = requestParameters.parent2;
                        }
                        if (requestParameters.context !== undefined) {
                            queryParameters['context'] = requestParameters.context;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/wp/v2/pages/{parent}/autosaves/{id}".replace("{" + "parent" + "}", encodeURIComponent(String(requestParameters.parent))).replace("{" + "id" + "}", encodeURIComponent(String(requestParameters.id))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return PageRevisionFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getWpV2PagesByParentAutosavesById = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getWpV2PagesByParentAutosavesByIdRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getWpV2PagesByParentRevisionsRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.parent === null || requestParameters.parent === undefined) {
                            throw new runtime.RequiredError('parent', 'Required parameter requestParameters.parent was null or undefined when calling getWpV2PagesByParentRevisions.');
                        }
                        queryParameters = {};
                        if (requestParameters.parent2 !== undefined) {
                            queryParameters['parent'] = requestParameters.parent2;
                        }
                        if (requestParameters.context !== undefined) {
                            queryParameters['context'] = requestParameters.context;
                        }
                        if (requestParameters.page !== undefined) {
                            queryParameters['page'] = requestParameters.page;
                        }
                        if (requestParameters.per_page !== undefined) {
                            queryParameters['per_page'] = requestParameters.per_page;
                        }
                        if (requestParameters.search !== undefined) {
                            queryParameters['search'] = requestParameters.search;
                        }
                        if (requestParameters.exclude) {
                            queryParameters['exclude'] = requestParameters.exclude;
                        }
                        if (requestParameters.include) {
                            queryParameters['include'] = requestParameters.include;
                        }
                        if (requestParameters.offset !== undefined) {
                            queryParameters['offset'] = requestParameters.offset;
                        }
                        if (requestParameters.order !== undefined) {
                            queryParameters['order'] = requestParameters.order;
                        }
                        if (requestParameters.orderby !== undefined) {
                            queryParameters['orderby'] = requestParameters.orderby;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/wp/v2/pages/{parent}/revisions".replace("{" + "parent" + "}", encodeURIComponent(String(requestParameters.parent))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return jsonValue.map(PageRevisionFromJSON); })];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getWpV2PagesByParentRevisions = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getWpV2PagesByParentRevisionsRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getWpV2PagesByParentRevisionsByIdRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.parent === null || requestParameters.parent === undefined) {
                            throw new runtime.RequiredError('parent', 'Required parameter requestParameters.parent was null or undefined when calling getWpV2PagesByParentRevisionsById.');
                        }
                        if (requestParameters.id === null || requestParameters.id === undefined) {
                            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getWpV2PagesByParentRevisionsById.');
                        }
                        queryParameters = {};
                        if (requestParameters.parent2 !== undefined) {
                            queryParameters['parent'] = requestParameters.parent2;
                        }
                        if (requestParameters.context !== undefined) {
                            queryParameters['context'] = requestParameters.context;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/wp/v2/pages/{parent}/revisions/{id}".replace("{" + "parent" + "}", encodeURIComponent(String(requestParameters.parent))).replace("{" + "id" + "}", encodeURIComponent(String(requestParameters.id))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return PageRevisionFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getWpV2PagesByParentRevisionsById = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getWpV2PagesByParentRevisionsByIdRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getWpV2PostsRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.context !== undefined) {
                            queryParameters['context'] = requestParameters.context;
                        }
                        if (requestParameters.page !== undefined) {
                            queryParameters['page'] = requestParameters.page;
                        }
                        if (requestParameters.per_page !== undefined) {
                            queryParameters['per_page'] = requestParameters.per_page;
                        }
                        if (requestParameters.search !== undefined) {
                            queryParameters['search'] = requestParameters.search;
                        }
                        if (requestParameters.after !== undefined) {
                            queryParameters['after'] = requestParameters.after.toISOString();
                        }
                        if (requestParameters.author) {
                            queryParameters['author'] = requestParameters.author;
                        }
                        if (requestParameters.author_exclude) {
                            queryParameters['author_exclude'] = requestParameters.author_exclude;
                        }
                        if (requestParameters.before !== undefined) {
                            queryParameters['before'] = requestParameters.before.toISOString();
                        }
                        if (requestParameters.exclude) {
                            queryParameters['exclude'] = requestParameters.exclude;
                        }
                        if (requestParameters.include) {
                            queryParameters['include'] = requestParameters.include;
                        }
                        if (requestParameters.offset !== undefined) {
                            queryParameters['offset'] = requestParameters.offset;
                        }
                        if (requestParameters.order !== undefined) {
                            queryParameters['order'] = requestParameters.order;
                        }
                        if (requestParameters.orderby !== undefined) {
                            queryParameters['orderby'] = requestParameters.orderby;
                        }
                        if (requestParameters.slug) {
                            queryParameters['slug'] = requestParameters.slug;
                        }
                        if (requestParameters.lang) {
                            queryParameters['lang'] = requestParameters.lang;
                        }
                        if (requestParameters.status !== undefined) {
                            queryParameters['status'] = requestParameters.status;
                        }
                        if (requestParameters.categories) {
                            queryParameters['categories'] = requestParameters.categories;
                        }
                        if (requestParameters.categories_exclude) {
                            queryParameters['categories_exclude'] = requestParameters.categories_exclude;
                        }
                        if (requestParameters.tags) {
                            queryParameters['tags'] = requestParameters.tags;
                        }
                        if (requestParameters.tags_exclude) {
                            queryParameters['tags_exclude'] = requestParameters.tags_exclude;
                        }
                        if (requestParameters.sticky !== undefined) {
                            queryParameters['sticky'] = requestParameters.sticky;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/wp/v2/posts",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return jsonValue.map(PostFromJSON); })];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getWpV2Posts = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getWpV2PostsRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getWpV2PostsByIdRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.id === null || requestParameters.id === undefined) {
                            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getWpV2PostsById.');
                        }
                        queryParameters = {};
                        if (requestParameters.context !== undefined) {
                            queryParameters['context'] = requestParameters.context;
                        }
                        if (requestParameters.password !== undefined) {
                            queryParameters['password'] = requestParameters.password;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/wp/v2/posts/{id}".replace("{" + "id" + "}", encodeURIComponent(String(requestParameters.id))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return PostFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getWpV2PostsById = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getWpV2PostsByIdRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getWpV2PostsByIdAutosavesRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.id === null || requestParameters.id === undefined) {
                            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getWpV2PostsByIdAutosaves.');
                        }
                        queryParameters = {};
                        if (requestParameters.parent !== undefined) {
                            queryParameters['parent'] = requestParameters.parent;
                        }
                        if (requestParameters.context !== undefined) {
                            queryParameters['context'] = requestParameters.context;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/wp/v2/posts/{id}/autosaves".replace("{" + "id" + "}", encodeURIComponent(String(requestParameters.id))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return jsonValue.map(PostRevisionFromJSON); })];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getWpV2PostsByIdAutosaves = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getWpV2PostsByIdAutosavesRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getWpV2PostsByParentAutosavesByIdRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.parent === null || requestParameters.parent === undefined) {
                            throw new runtime.RequiredError('parent', 'Required parameter requestParameters.parent was null or undefined when calling getWpV2PostsByParentAutosavesById.');
                        }
                        if (requestParameters.id === null || requestParameters.id === undefined) {
                            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getWpV2PostsByParentAutosavesById.');
                        }
                        queryParameters = {};
                        if (requestParameters.parent2 !== undefined) {
                            queryParameters['parent'] = requestParameters.parent2;
                        }
                        if (requestParameters.context !== undefined) {
                            queryParameters['context'] = requestParameters.context;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/wp/v2/posts/{parent}/autosaves/{id}".replace("{" + "parent" + "}", encodeURIComponent(String(requestParameters.parent))).replace("{" + "id" + "}", encodeURIComponent(String(requestParameters.id))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return PostRevisionFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getWpV2PostsByParentAutosavesById = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getWpV2PostsByParentAutosavesByIdRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getWpV2PostsByParentRevisionsRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.parent === null || requestParameters.parent === undefined) {
                            throw new runtime.RequiredError('parent', 'Required parameter requestParameters.parent was null or undefined when calling getWpV2PostsByParentRevisions.');
                        }
                        queryParameters = {};
                        if (requestParameters.parent2 !== undefined) {
                            queryParameters['parent'] = requestParameters.parent2;
                        }
                        if (requestParameters.context !== undefined) {
                            queryParameters['context'] = requestParameters.context;
                        }
                        if (requestParameters.page !== undefined) {
                            queryParameters['page'] = requestParameters.page;
                        }
                        if (requestParameters.per_page !== undefined) {
                            queryParameters['per_page'] = requestParameters.per_page;
                        }
                        if (requestParameters.search !== undefined) {
                            queryParameters['search'] = requestParameters.search;
                        }
                        if (requestParameters.exclude) {
                            queryParameters['exclude'] = requestParameters.exclude;
                        }
                        if (requestParameters.include) {
                            queryParameters['include'] = requestParameters.include;
                        }
                        if (requestParameters.offset !== undefined) {
                            queryParameters['offset'] = requestParameters.offset;
                        }
                        if (requestParameters.order !== undefined) {
                            queryParameters['order'] = requestParameters.order;
                        }
                        if (requestParameters.orderby !== undefined) {
                            queryParameters['orderby'] = requestParameters.orderby;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/wp/v2/posts/{parent}/revisions".replace("{" + "parent" + "}", encodeURIComponent(String(requestParameters.parent))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return jsonValue.map(PostRevisionFromJSON); })];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getWpV2PostsByParentRevisions = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getWpV2PostsByParentRevisionsRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getWpV2PostsByParentRevisionsByIdRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.parent === null || requestParameters.parent === undefined) {
                            throw new runtime.RequiredError('parent', 'Required parameter requestParameters.parent was null or undefined when calling getWpV2PostsByParentRevisionsById.');
                        }
                        if (requestParameters.id === null || requestParameters.id === undefined) {
                            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getWpV2PostsByParentRevisionsById.');
                        }
                        queryParameters = {};
                        if (requestParameters.parent2 !== undefined) {
                            queryParameters['parent'] = requestParameters.parent2;
                        }
                        if (requestParameters.context !== undefined) {
                            queryParameters['context'] = requestParameters.context;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/wp/v2/posts/{parent}/revisions/{id}".replace("{" + "parent" + "}", encodeURIComponent(String(requestParameters.parent))).replace("{" + "id" + "}", encodeURIComponent(String(requestParameters.id))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return PostRevisionFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getWpV2PostsByParentRevisionsById = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getWpV2PostsByParentRevisionsByIdRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getWpV2SearchRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.context !== undefined) {
                            queryParameters['context'] = requestParameters.context;
                        }
                        if (requestParameters.page !== undefined) {
                            queryParameters['page'] = requestParameters.page;
                        }
                        if (requestParameters.per_page !== undefined) {
                            queryParameters['per_page'] = requestParameters.per_page;
                        }
                        if (requestParameters.search !== undefined) {
                            queryParameters['search'] = requestParameters.search;
                        }
                        if (requestParameters.type !== undefined) {
                            queryParameters['type'] = requestParameters.type;
                        }
                        if (requestParameters.subtype !== undefined) {
                            queryParameters['subtype'] = requestParameters.subtype;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/wp/v2/search",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return jsonValue.map(SearchResultFromJSON); })];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getWpV2Search = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getWpV2SearchRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getWpV2SettingsRaw = function () {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/wp/v2/settings",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return jsonValue.map(SettingsFromJSON); })];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getWpV2Settings = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getWpV2SettingsRaw()];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getWpV2StatusesRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.context !== undefined) {
                            queryParameters['context'] = requestParameters.context;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/wp/v2/statuses",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return jsonValue.map(StatusFromJSON); })];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getWpV2Statuses = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getWpV2StatusesRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getWpV2StatusesByStatusRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.status === null || requestParameters.status === undefined) {
                            throw new runtime.RequiredError('status', 'Required parameter requestParameters.status was null or undefined when calling getWpV2StatusesByStatus.');
                        }
                        queryParameters = {};
                        if (requestParameters.status2 !== undefined) {
                            queryParameters['status'] = requestParameters.status2;
                        }
                        if (requestParameters.context !== undefined) {
                            queryParameters['context'] = requestParameters.context;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/wp/v2/statuses/{status}".replace("{" + "status" + "}", encodeURIComponent(String(requestParameters.status))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return StatusFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getWpV2StatusesByStatus = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getWpV2StatusesByStatusRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getWpV2TagsRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.context !== undefined) {
                            queryParameters['context'] = requestParameters.context;
                        }
                        if (requestParameters.page !== undefined) {
                            queryParameters['page'] = requestParameters.page;
                        }
                        if (requestParameters.per_page !== undefined) {
                            queryParameters['per_page'] = requestParameters.per_page;
                        }
                        if (requestParameters.search !== undefined) {
                            queryParameters['search'] = requestParameters.search;
                        }
                        if (requestParameters.exclude) {
                            queryParameters['exclude'] = requestParameters.exclude;
                        }
                        if (requestParameters.include) {
                            queryParameters['include'] = requestParameters.include;
                        }
                        if (requestParameters.offset !== undefined) {
                            queryParameters['offset'] = requestParameters.offset;
                        }
                        if (requestParameters.order !== undefined) {
                            queryParameters['order'] = requestParameters.order;
                        }
                        if (requestParameters.orderby !== undefined) {
                            queryParameters['orderby'] = requestParameters.orderby;
                        }
                        if (requestParameters.hide_empty !== undefined) {
                            queryParameters['hide_empty'] = requestParameters.hide_empty;
                        }
                        if (requestParameters.post !== undefined) {
                            queryParameters['post'] = requestParameters.post;
                        }
                        if (requestParameters.slug) {
                            queryParameters['slug'] = requestParameters.slug;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/wp/v2/tags",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return jsonValue.map(TagFromJSON); })];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getWpV2Tags = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getWpV2TagsRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getWpV2TagsByIdRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.id === null || requestParameters.id === undefined) {
                            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getWpV2TagsById.');
                        }
                        queryParameters = {};
                        if (requestParameters.context !== undefined) {
                            queryParameters['context'] = requestParameters.context;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/wp/v2/tags/{id}".replace("{" + "id" + "}", encodeURIComponent(String(requestParameters.id))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return TagFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getWpV2TagsById = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getWpV2TagsByIdRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getWpV2TaxonomiesRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.context !== undefined) {
                            queryParameters['context'] = requestParameters.context;
                        }
                        if (requestParameters.type !== undefined) {
                            queryParameters['type'] = requestParameters.type;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/wp/v2/taxonomies",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return jsonValue.map(TaxonomyFromJSON); })];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getWpV2Taxonomies = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getWpV2TaxonomiesRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getWpV2TaxonomiesByTaxonomyRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.taxonomy === null || requestParameters.taxonomy === undefined) {
                            throw new runtime.RequiredError('taxonomy', 'Required parameter requestParameters.taxonomy was null or undefined when calling getWpV2TaxonomiesByTaxonomy.');
                        }
                        queryParameters = {};
                        if (requestParameters.taxonomy2 !== undefined) {
                            queryParameters['taxonomy'] = requestParameters.taxonomy2;
                        }
                        if (requestParameters.context !== undefined) {
                            queryParameters['context'] = requestParameters.context;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/wp/v2/taxonomies/{taxonomy}".replace("{" + "taxonomy" + "}", encodeURIComponent(String(requestParameters.taxonomy))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return TaxonomyFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getWpV2TaxonomiesByTaxonomy = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getWpV2TaxonomiesByTaxonomyRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getWpV2ThemesRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.status === null || requestParameters.status === undefined) {
                            throw new runtime.RequiredError('status', 'Required parameter requestParameters.status was null or undefined when calling getWpV2Themes.');
                        }
                        queryParameters = {};
                        if (requestParameters.context !== undefined) {
                            queryParameters['context'] = requestParameters.context;
                        }
                        if (requestParameters.page !== undefined) {
                            queryParameters['page'] = requestParameters.page;
                        }
                        if (requestParameters.per_page !== undefined) {
                            queryParameters['per_page'] = requestParameters.per_page;
                        }
                        if (requestParameters.search !== undefined) {
                            queryParameters['search'] = requestParameters.search;
                        }
                        if (requestParameters.status) {
                            queryParameters['status'] = requestParameters.status;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/wp/v2/themes",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return jsonValue.map(ThemeFromJSON); })];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getWpV2Themes = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getWpV2ThemesRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getWpV2TypesRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.context !== undefined) {
                            queryParameters['context'] = requestParameters.context;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/wp/v2/types",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return jsonValue.map(TypeFromJSON); })];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getWpV2Types = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getWpV2TypesRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getWpV2TypesByTypeRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.type === null || requestParameters.type === undefined) {
                            throw new runtime.RequiredError('type', 'Required parameter requestParameters.type was null or undefined when calling getWpV2TypesByType.');
                        }
                        queryParameters = {};
                        if (requestParameters.type2 !== undefined) {
                            queryParameters['type'] = requestParameters.type2;
                        }
                        if (requestParameters.context !== undefined) {
                            queryParameters['context'] = requestParameters.context;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/wp/v2/types/{type}".replace("{" + "type" + "}", encodeURIComponent(String(requestParameters.type))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return TypeFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getWpV2TypesByType = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getWpV2TypesByTypeRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getWpV2UsersRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.context !== undefined) {
                            queryParameters['context'] = requestParameters.context;
                        }
                        if (requestParameters.page !== undefined) {
                            queryParameters['page'] = requestParameters.page;
                        }
                        if (requestParameters.per_page !== undefined) {
                            queryParameters['per_page'] = requestParameters.per_page;
                        }
                        if (requestParameters.search !== undefined) {
                            queryParameters['search'] = requestParameters.search;
                        }
                        if (requestParameters.exclude) {
                            queryParameters['exclude'] = requestParameters.exclude;
                        }
                        if (requestParameters.include) {
                            queryParameters['include'] = requestParameters.include;
                        }
                        if (requestParameters.offset !== undefined) {
                            queryParameters['offset'] = requestParameters.offset;
                        }
                        if (requestParameters.order !== undefined) {
                            queryParameters['order'] = requestParameters.order;
                        }
                        if (requestParameters.orderby !== undefined) {
                            queryParameters['orderby'] = requestParameters.orderby;
                        }
                        if (requestParameters.slug) {
                            queryParameters['slug'] = requestParameters.slug;
                        }
                        if (requestParameters.roles) {
                            queryParameters['roles'] = requestParameters.roles;
                        }
                        if (requestParameters.who !== undefined) {
                            queryParameters['who'] = requestParameters.who;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/wp/v2/users",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return jsonValue.map(UserFromJSON); })];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getWpV2Users = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getWpV2UsersRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getWpV2UsersByIdRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.id === null || requestParameters.id === undefined) {
                            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling getWpV2UsersById.');
                        }
                        queryParameters = {};
                        if (requestParameters.context !== undefined) {
                            queryParameters['context'] = requestParameters.context;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/wp/v2/users/{id}".replace("{" + "id" + "}", encodeURIComponent(String(requestParameters.id))),
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return UserFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getWpV2UsersById = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getWpV2UsersByIdRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getWpV2UsersMeRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        if (requestParameters.context !== undefined) {
                            queryParameters['context'] = requestParameters.context;
                        }
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
                        }
                        return [4 /*yield*/, this.request({
                                path: "/wp/v2/users/me",
                                method: 'GET',
                                headers: headerParameters,
                                query: queryParameters,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return jsonValue.map(UserFromJSON); })];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.getWpV2UsersMe = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getWpV2UsersMeRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.postWpV2BlocksRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, consumes, canConsumeForm, formParams, useForm, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
                        }
                        consumes = [
                            { contentType: 'multipart/form-data' },
                        ];
                        canConsumeForm = runtime.canConsumeForm(consumes);
                        useForm = false;
                        if (useForm) {
                            formParams = new FormData();
                        }
                        else {
                            formParams = new URLSearchParams();
                        }
                        if (requestParameters.date !== undefined) {
                            formParams.append('date', requestParameters.date);
                        }
                        if (requestParameters.date_gmt !== undefined) {
                            formParams.append('date_gmt', requestParameters.date_gmt);
                        }
                        if (requestParameters.slug !== undefined) {
                            formParams.append('slug', requestParameters.slug);
                        }
                        if (requestParameters.status !== undefined) {
                            formParams.append('status', requestParameters.status);
                        }
                        if (requestParameters.password !== undefined) {
                            formParams.append('password', requestParameters.password);
                        }
                        if (requestParameters.title !== undefined) {
                            formParams.append('title', requestParameters.title);
                        }
                        if (requestParameters.content !== undefined) {
                            formParams.append('content', requestParameters.content);
                        }
                        if (requestParameters.template !== undefined) {
                            formParams.append('template', requestParameters.template);
                        }
                        return [4 /*yield*/, this.request({
                                path: "/wp/v2/blocks",
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: formParams,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return WpBlockFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.postWpV2Blocks = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.postWpV2BlocksRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.postWpV2BlocksByIdRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, consumes, canConsumeForm, formParams, useForm, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.id2 === null || requestParameters.id2 === undefined) {
                            throw new runtime.RequiredError('id2', 'Required parameter requestParameters.id2 was null or undefined when calling postWpV2BlocksById.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
                        }
                        consumes = [
                            { contentType: 'multipart/form-data' },
                        ];
                        canConsumeForm = runtime.canConsumeForm(consumes);
                        useForm = false;
                        if (useForm) {
                            formParams = new FormData();
                        }
                        else {
                            formParams = new URLSearchParams();
                        }
                        if (requestParameters.id !== undefined) {
                            formParams.append('id', requestParameters.id);
                        }
                        if (requestParameters.date !== undefined) {
                            formParams.append('date', requestParameters.date);
                        }
                        if (requestParameters.date_gmt !== undefined) {
                            formParams.append('date_gmt', requestParameters.date_gmt);
                        }
                        if (requestParameters.slug !== undefined) {
                            formParams.append('slug', requestParameters.slug);
                        }
                        if (requestParameters.status !== undefined) {
                            formParams.append('status', requestParameters.status);
                        }
                        if (requestParameters.password !== undefined) {
                            formParams.append('password', requestParameters.password);
                        }
                        if (requestParameters.title !== undefined) {
                            formParams.append('title', requestParameters.title);
                        }
                        if (requestParameters.content !== undefined) {
                            formParams.append('content', requestParameters.content);
                        }
                        if (requestParameters.template !== undefined) {
                            formParams.append('template', requestParameters.template);
                        }
                        return [4 /*yield*/, this.request({
                                path: "/wp/v2/blocks/{id}".replace("{" + "id" + "}", encodeURIComponent(String(requestParameters.id2))),
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: formParams,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return WpBlockFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.postWpV2BlocksById = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.postWpV2BlocksByIdRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.postWpV2BlocksByIdAutosavesRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, consumes, canConsumeForm, formParams, useForm, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.id === null || requestParameters.id === undefined) {
                            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling postWpV2BlocksByIdAutosaves.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
                        }
                        consumes = [
                            { contentType: 'multipart/form-data' },
                        ];
                        canConsumeForm = runtime.canConsumeForm(consumes);
                        useForm = false;
                        if (useForm) {
                            formParams = new FormData();
                        }
                        else {
                            formParams = new URLSearchParams();
                        }
                        if (requestParameters.parent !== undefined) {
                            formParams.append('parent', requestParameters.parent);
                        }
                        if (requestParameters.date !== undefined) {
                            formParams.append('date', requestParameters.date);
                        }
                        if (requestParameters.date_gmt !== undefined) {
                            formParams.append('date_gmt', requestParameters.date_gmt);
                        }
                        if (requestParameters.slug !== undefined) {
                            formParams.append('slug', requestParameters.slug);
                        }
                        if (requestParameters.status !== undefined) {
                            formParams.append('status', requestParameters.status);
                        }
                        if (requestParameters.password !== undefined) {
                            formParams.append('password', requestParameters.password);
                        }
                        if (requestParameters.title !== undefined) {
                            formParams.append('title', requestParameters.title);
                        }
                        if (requestParameters.content !== undefined) {
                            formParams.append('content', requestParameters.content);
                        }
                        if (requestParameters.template !== undefined) {
                            formParams.append('template', requestParameters.template);
                        }
                        return [4 /*yield*/, this.request({
                                path: "/wp/v2/blocks/{id}/autosaves".replace("{" + "id" + "}", encodeURIComponent(String(requestParameters.id))),
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: formParams,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return WpBlockRevisionFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.postWpV2BlocksByIdAutosaves = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.postWpV2BlocksByIdAutosavesRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.postWpV2CategoriesRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, consumes, canConsumeForm, formParams, useForm, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling postWpV2Categories.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
                        }
                        consumes = [
                            { contentType: 'multipart/form-data' },
                        ];
                        canConsumeForm = runtime.canConsumeForm(consumes);
                        useForm = false;
                        if (useForm) {
                            formParams = new FormData();
                        }
                        else {
                            formParams = new URLSearchParams();
                        }
                        if (requestParameters.description !== undefined) {
                            formParams.append('description', requestParameters.description);
                        }
                        if (requestParameters.name !== undefined) {
                            formParams.append('name', requestParameters.name);
                        }
                        if (requestParameters.slug !== undefined) {
                            formParams.append('slug', requestParameters.slug);
                        }
                        if (requestParameters.parent !== undefined) {
                            formParams.append('parent', requestParameters.parent);
                        }
                        if (requestParameters.meta !== undefined) {
                            formParams.append('meta', requestParameters.meta);
                        }
                        return [4 /*yield*/, this.request({
                                path: "/wp/v2/categories",
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: formParams,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return CategoryFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.postWpV2Categories = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.postWpV2CategoriesRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.postWpV2CategoriesByIdRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, consumes, canConsumeForm, formParams, useForm, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.id2 === null || requestParameters.id2 === undefined) {
                            throw new runtime.RequiredError('id2', 'Required parameter requestParameters.id2 was null or undefined when calling postWpV2CategoriesById.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
                        }
                        consumes = [
                            { contentType: 'multipart/form-data' },
                        ];
                        canConsumeForm = runtime.canConsumeForm(consumes);
                        useForm = false;
                        if (useForm) {
                            formParams = new FormData();
                        }
                        else {
                            formParams = new URLSearchParams();
                        }
                        if (requestParameters.id !== undefined) {
                            formParams.append('id', requestParameters.id);
                        }
                        if (requestParameters.description !== undefined) {
                            formParams.append('description', requestParameters.description);
                        }
                        if (requestParameters.name !== undefined) {
                            formParams.append('name', requestParameters.name);
                        }
                        if (requestParameters.slug !== undefined) {
                            formParams.append('slug', requestParameters.slug);
                        }
                        if (requestParameters.parent !== undefined) {
                            formParams.append('parent', requestParameters.parent);
                        }
                        if (requestParameters.meta !== undefined) {
                            formParams.append('meta', requestParameters.meta);
                        }
                        return [4 /*yield*/, this.request({
                                path: "/wp/v2/categories/{id}".replace("{" + "id" + "}", encodeURIComponent(String(requestParameters.id2))),
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: formParams,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return CategoryFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.postWpV2CategoriesById = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.postWpV2CategoriesByIdRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.postWpV2CommentsRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, consumes, canConsumeForm, formParams, useForm, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
                        }
                        consumes = [
                            { contentType: 'multipart/form-data' },
                        ];
                        canConsumeForm = runtime.canConsumeForm(consumes);
                        useForm = false;
                        if (useForm) {
                            formParams = new FormData();
                        }
                        else {
                            formParams = new URLSearchParams();
                        }
                        if (requestParameters.author !== undefined) {
                            formParams.append('author', requestParameters.author);
                        }
                        if (requestParameters.author_email !== undefined) {
                            formParams.append('author_email', requestParameters.author_email);
                        }
                        if (requestParameters.author_ip !== undefined) {
                            formParams.append('author_ip', requestParameters.author_ip);
                        }
                        if (requestParameters.author_name !== undefined) {
                            formParams.append('author_name', requestParameters.author_name);
                        }
                        if (requestParameters.author_url !== undefined) {
                            formParams.append('author_url', requestParameters.author_url);
                        }
                        if (requestParameters.author_user_agent !== undefined) {
                            formParams.append('author_user_agent', requestParameters.author_user_agent);
                        }
                        if (requestParameters.content !== undefined) {
                            formParams.append('content', requestParameters.content);
                        }
                        if (requestParameters.date !== undefined) {
                            formParams.append('date', requestParameters.date);
                        }
                        if (requestParameters.date_gmt !== undefined) {
                            formParams.append('date_gmt', requestParameters.date_gmt);
                        }
                        if (requestParameters.parent !== undefined) {
                            formParams.append('parent', requestParameters.parent);
                        }
                        if (requestParameters.post !== undefined) {
                            formParams.append('post', requestParameters.post);
                        }
                        if (requestParameters.status !== undefined) {
                            formParams.append('status', requestParameters.status);
                        }
                        if (requestParameters.meta !== undefined) {
                            formParams.append('meta', requestParameters.meta);
                        }
                        return [4 /*yield*/, this.request({
                                path: "/wp/v2/comments",
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: formParams,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return CommentFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.postWpV2Comments = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.postWpV2CommentsRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.postWpV2CommentsByIdRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, consumes, canConsumeForm, formParams, useForm, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.id2 === null || requestParameters.id2 === undefined) {
                            throw new runtime.RequiredError('id2', 'Required parameter requestParameters.id2 was null or undefined when calling postWpV2CommentsById.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
                        }
                        consumes = [
                            { contentType: 'multipart/form-data' },
                        ];
                        canConsumeForm = runtime.canConsumeForm(consumes);
                        useForm = false;
                        if (useForm) {
                            formParams = new FormData();
                        }
                        else {
                            formParams = new URLSearchParams();
                        }
                        if (requestParameters.id !== undefined) {
                            formParams.append('id', requestParameters.id);
                        }
                        if (requestParameters.author !== undefined) {
                            formParams.append('author', requestParameters.author);
                        }
                        if (requestParameters.author_email !== undefined) {
                            formParams.append('author_email', requestParameters.author_email);
                        }
                        if (requestParameters.author_ip !== undefined) {
                            formParams.append('author_ip', requestParameters.author_ip);
                        }
                        if (requestParameters.author_name !== undefined) {
                            formParams.append('author_name', requestParameters.author_name);
                        }
                        if (requestParameters.author_url !== undefined) {
                            formParams.append('author_url', requestParameters.author_url);
                        }
                        if (requestParameters.author_user_agent !== undefined) {
                            formParams.append('author_user_agent', requestParameters.author_user_agent);
                        }
                        if (requestParameters.content !== undefined) {
                            formParams.append('content', requestParameters.content);
                        }
                        if (requestParameters.date !== undefined) {
                            formParams.append('date', requestParameters.date);
                        }
                        if (requestParameters.date_gmt !== undefined) {
                            formParams.append('date_gmt', requestParameters.date_gmt);
                        }
                        if (requestParameters.parent !== undefined) {
                            formParams.append('parent', requestParameters.parent);
                        }
                        if (requestParameters.post !== undefined) {
                            formParams.append('post', requestParameters.post);
                        }
                        if (requestParameters.status !== undefined) {
                            formParams.append('status', requestParameters.status);
                        }
                        if (requestParameters.meta !== undefined) {
                            formParams.append('meta', requestParameters.meta);
                        }
                        return [4 /*yield*/, this.request({
                                path: "/wp/v2/comments/{id}".replace("{" + "id" + "}", encodeURIComponent(String(requestParameters.id2))),
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: formParams,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return CommentFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.postWpV2CommentsById = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.postWpV2CommentsByIdRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.postWpV2MediaRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, consumes, canConsumeForm, formParams, useForm, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
                        }
                        consumes = [
                            { contentType: 'multipart/form-data' },
                        ];
                        canConsumeForm = runtime.canConsumeForm(consumes);
                        useForm = false;
                        if (useForm) {
                            formParams = new FormData();
                        }
                        else {
                            formParams = new URLSearchParams();
                        }
                        if (requestParameters.date !== undefined) {
                            formParams.append('date', requestParameters.date);
                        }
                        if (requestParameters.date_gmt !== undefined) {
                            formParams.append('date_gmt', requestParameters.date_gmt);
                        }
                        if (requestParameters.slug !== undefined) {
                            formParams.append('slug', requestParameters.slug);
                        }
                        if (requestParameters.status !== undefined) {
                            formParams.append('status', requestParameters.status);
                        }
                        if (requestParameters.title !== undefined) {
                            formParams.append('title', requestParameters.title);
                        }
                        if (requestParameters.author !== undefined) {
                            formParams.append('author', requestParameters.author);
                        }
                        if (requestParameters.comment_status !== undefined) {
                            formParams.append('comment_status', requestParameters.comment_status);
                        }
                        if (requestParameters.ping_status !== undefined) {
                            formParams.append('ping_status', requestParameters.ping_status);
                        }
                        if (requestParameters.meta !== undefined) {
                            formParams.append('meta', requestParameters.meta);
                        }
                        if (requestParameters.template !== undefined) {
                            formParams.append('template', requestParameters.template);
                        }
                        if (requestParameters.alt_text !== undefined) {
                            formParams.append('alt_text', requestParameters.alt_text);
                        }
                        if (requestParameters.caption !== undefined) {
                            formParams.append('caption', requestParameters.caption);
                        }
                        if (requestParameters.description !== undefined) {
                            formParams.append('description', requestParameters.description);
                        }
                        if (requestParameters.post !== undefined) {
                            formParams.append('post', requestParameters.post);
                        }
                        return [4 /*yield*/, this.request({
                                path: "/wp/v2/media",
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: formParams,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return AttachmentFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.postWpV2Media = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.postWpV2MediaRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.postWpV2MediaByIdRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, consumes, canConsumeForm, formParams, useForm, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.id2 === null || requestParameters.id2 === undefined) {
                            throw new runtime.RequiredError('id2', 'Required parameter requestParameters.id2 was null or undefined when calling postWpV2MediaById.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
                        }
                        consumes = [
                            { contentType: 'multipart/form-data' },
                        ];
                        canConsumeForm = runtime.canConsumeForm(consumes);
                        useForm = false;
                        if (useForm) {
                            formParams = new FormData();
                        }
                        else {
                            formParams = new URLSearchParams();
                        }
                        if (requestParameters.id !== undefined) {
                            formParams.append('id', requestParameters.id);
                        }
                        if (requestParameters.date !== undefined) {
                            formParams.append('date', requestParameters.date);
                        }
                        if (requestParameters.date_gmt !== undefined) {
                            formParams.append('date_gmt', requestParameters.date_gmt);
                        }
                        if (requestParameters.slug !== undefined) {
                            formParams.append('slug', requestParameters.slug);
                        }
                        if (requestParameters.status !== undefined) {
                            formParams.append('status', requestParameters.status);
                        }
                        if (requestParameters.title !== undefined) {
                            formParams.append('title', requestParameters.title);
                        }
                        if (requestParameters.author !== undefined) {
                            formParams.append('author', requestParameters.author);
                        }
                        if (requestParameters.comment_status !== undefined) {
                            formParams.append('comment_status', requestParameters.comment_status);
                        }
                        if (requestParameters.ping_status !== undefined) {
                            formParams.append('ping_status', requestParameters.ping_status);
                        }
                        if (requestParameters.meta !== undefined) {
                            formParams.append('meta', requestParameters.meta);
                        }
                        if (requestParameters.template !== undefined) {
                            formParams.append('template', requestParameters.template);
                        }
                        if (requestParameters.alt_text !== undefined) {
                            formParams.append('alt_text', requestParameters.alt_text);
                        }
                        if (requestParameters.caption !== undefined) {
                            formParams.append('caption', requestParameters.caption);
                        }
                        if (requestParameters.description !== undefined) {
                            formParams.append('description', requestParameters.description);
                        }
                        if (requestParameters.post !== undefined) {
                            formParams.append('post', requestParameters.post);
                        }
                        return [4 /*yield*/, this.request({
                                path: "/wp/v2/media/{id}".replace("{" + "id" + "}", encodeURIComponent(String(requestParameters.id2))),
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: formParams,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return AttachmentFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.postWpV2MediaById = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.postWpV2MediaByIdRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.postWpV2PagesRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, consumes, canConsumeForm, formParams, useForm, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
                        }
                        consumes = [
                            { contentType: 'multipart/form-data' },
                        ];
                        canConsumeForm = runtime.canConsumeForm(consumes);
                        useForm = false;
                        if (useForm) {
                            formParams = new FormData();
                        }
                        else {
                            formParams = new URLSearchParams();
                        }
                        if (requestParameters.date !== undefined) {
                            formParams.append('date', requestParameters.date);
                        }
                        if (requestParameters.date_gmt !== undefined) {
                            formParams.append('date_gmt', requestParameters.date_gmt);
                        }
                        if (requestParameters.slug !== undefined) {
                            formParams.append('slug', requestParameters.slug);
                        }
                        if (requestParameters.status !== undefined) {
                            formParams.append('status', requestParameters.status);
                        }
                        if (requestParameters.password !== undefined) {
                            formParams.append('password', requestParameters.password);
                        }
                        if (requestParameters.parent !== undefined) {
                            formParams.append('parent', requestParameters.parent);
                        }
                        if (requestParameters.title !== undefined) {
                            formParams.append('title', requestParameters.title);
                        }
                        if (requestParameters.content !== undefined) {
                            formParams.append('content', requestParameters.content);
                        }
                        if (requestParameters.author !== undefined) {
                            formParams.append('author', requestParameters.author);
                        }
                        if (requestParameters.excerpt !== undefined) {
                            formParams.append('excerpt', requestParameters.excerpt);
                        }
                        if (requestParameters.featured_media !== undefined) {
                            formParams.append('featured_media', requestParameters.featured_media);
                        }
                        if (requestParameters.comment_status !== undefined) {
                            formParams.append('comment_status', requestParameters.comment_status);
                        }
                        if (requestParameters.ping_status !== undefined) {
                            formParams.append('ping_status', requestParameters.ping_status);
                        }
                        if (requestParameters.menu_order !== undefined) {
                            formParams.append('menu_order', requestParameters.menu_order);
                        }
                        if (requestParameters.meta !== undefined) {
                            formParams.append('meta', requestParameters.meta);
                        }
                        if (requestParameters.template !== undefined) {
                            formParams.append('template', requestParameters.template);
                        }
                        return [4 /*yield*/, this.request({
                                path: "/wp/v2/pages",
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: formParams,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return PageFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.postWpV2Pages = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.postWpV2PagesRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.postWpV2PagesByIdRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, consumes, canConsumeForm, formParams, useForm, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.id2 === null || requestParameters.id2 === undefined) {
                            throw new runtime.RequiredError('id2', 'Required parameter requestParameters.id2 was null or undefined when calling postWpV2PagesById.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
                        }
                        consumes = [
                            { contentType: 'multipart/form-data' },
                        ];
                        canConsumeForm = runtime.canConsumeForm(consumes);
                        useForm = false;
                        if (useForm) {
                            formParams = new FormData();
                        }
                        else {
                            formParams = new URLSearchParams();
                        }
                        if (requestParameters.id !== undefined) {
                            formParams.append('id', requestParameters.id);
                        }
                        if (requestParameters.date !== undefined) {
                            formParams.append('date', requestParameters.date);
                        }
                        if (requestParameters.date_gmt !== undefined) {
                            formParams.append('date_gmt', requestParameters.date_gmt);
                        }
                        if (requestParameters.slug !== undefined) {
                            formParams.append('slug', requestParameters.slug);
                        }
                        if (requestParameters.status !== undefined) {
                            formParams.append('status', requestParameters.status);
                        }
                        if (requestParameters.password !== undefined) {
                            formParams.append('password', requestParameters.password);
                        }
                        if (requestParameters.parent !== undefined) {
                            formParams.append('parent', requestParameters.parent);
                        }
                        if (requestParameters.title !== undefined) {
                            formParams.append('title', requestParameters.title);
                        }
                        if (requestParameters.content !== undefined) {
                            formParams.append('content', requestParameters.content);
                        }
                        if (requestParameters.author !== undefined) {
                            formParams.append('author', requestParameters.author);
                        }
                        if (requestParameters.excerpt !== undefined) {
                            formParams.append('excerpt', requestParameters.excerpt);
                        }
                        if (requestParameters.featured_media !== undefined) {
                            formParams.append('featured_media', requestParameters.featured_media);
                        }
                        if (requestParameters.comment_status !== undefined) {
                            formParams.append('comment_status', requestParameters.comment_status);
                        }
                        if (requestParameters.ping_status !== undefined) {
                            formParams.append('ping_status', requestParameters.ping_status);
                        }
                        if (requestParameters.menu_order !== undefined) {
                            formParams.append('menu_order', requestParameters.menu_order);
                        }
                        if (requestParameters.meta !== undefined) {
                            formParams.append('meta', requestParameters.meta);
                        }
                        if (requestParameters.template !== undefined) {
                            formParams.append('template', requestParameters.template);
                        }
                        return [4 /*yield*/, this.request({
                                path: "/wp/v2/pages/{id}".replace("{" + "id" + "}", encodeURIComponent(String(requestParameters.id2))),
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: formParams,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return PageFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.postWpV2PagesById = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.postWpV2PagesByIdRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.postWpV2PagesByIdAutosavesRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, consumes, canConsumeForm, formParams, useForm, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.id === null || requestParameters.id === undefined) {
                            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling postWpV2PagesByIdAutosaves.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
                        }
                        consumes = [
                            { contentType: 'multipart/form-data' },
                        ];
                        canConsumeForm = runtime.canConsumeForm(consumes);
                        useForm = false;
                        if (useForm) {
                            formParams = new FormData();
                        }
                        else {
                            formParams = new URLSearchParams();
                        }
                        if (requestParameters.parent !== undefined) {
                            formParams.append('parent', requestParameters.parent);
                        }
                        if (requestParameters.date !== undefined) {
                            formParams.append('date', requestParameters.date);
                        }
                        if (requestParameters.date_gmt !== undefined) {
                            formParams.append('date_gmt', requestParameters.date_gmt);
                        }
                        if (requestParameters.slug !== undefined) {
                            formParams.append('slug', requestParameters.slug);
                        }
                        if (requestParameters.status !== undefined) {
                            formParams.append('status', requestParameters.status);
                        }
                        if (requestParameters.password !== undefined) {
                            formParams.append('password', requestParameters.password);
                        }
                        if (requestParameters.title !== undefined) {
                            formParams.append('title', requestParameters.title);
                        }
                        if (requestParameters.content !== undefined) {
                            formParams.append('content', requestParameters.content);
                        }
                        if (requestParameters.author !== undefined) {
                            formParams.append('author', requestParameters.author);
                        }
                        if (requestParameters.excerpt !== undefined) {
                            formParams.append('excerpt', requestParameters.excerpt);
                        }
                        if (requestParameters.featured_media !== undefined) {
                            formParams.append('featured_media', requestParameters.featured_media);
                        }
                        if (requestParameters.comment_status !== undefined) {
                            formParams.append('comment_status', requestParameters.comment_status);
                        }
                        if (requestParameters.ping_status !== undefined) {
                            formParams.append('ping_status', requestParameters.ping_status);
                        }
                        if (requestParameters.menu_order !== undefined) {
                            formParams.append('menu_order', requestParameters.menu_order);
                        }
                        if (requestParameters.meta !== undefined) {
                            formParams.append('meta', requestParameters.meta);
                        }
                        if (requestParameters.template !== undefined) {
                            formParams.append('template', requestParameters.template);
                        }
                        return [4 /*yield*/, this.request({
                                path: "/wp/v2/pages/{id}/autosaves".replace("{" + "id" + "}", encodeURIComponent(String(requestParameters.id))),
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: formParams,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return PageRevisionFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.postWpV2PagesByIdAutosaves = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.postWpV2PagesByIdAutosavesRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.postWpV2PostsRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, consumes, canConsumeForm, formParams, useForm, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
                        }
                        consumes = [
                            { contentType: 'multipart/form-data' },
                        ];
                        canConsumeForm = runtime.canConsumeForm(consumes);
                        useForm = false;
                        if (useForm) {
                            formParams = new FormData();
                        }
                        else {
                            formParams = new URLSearchParams();
                        }
                        if (requestParameters.date !== undefined) {
                            formParams.append('date', requestParameters.date);
                        }
                        if (requestParameters.date_gmt !== undefined) {
                            formParams.append('date_gmt', requestParameters.date_gmt);
                        }
                        if (requestParameters.slug !== undefined) {
                            formParams.append('slug', requestParameters.slug);
                        }
                        if (requestParameters.status !== undefined) {
                            formParams.append('status', requestParameters.status);
                        }
                        if (requestParameters.password !== undefined) {
                            formParams.append('password', requestParameters.password);
                        }
                        if (requestParameters.title !== undefined) {
                            formParams.append('title', requestParameters.title);
                        }
                        if (requestParameters.content !== undefined) {
                            formParams.append('content', requestParameters.content);
                        }
                        if (requestParameters.author !== undefined) {
                            formParams.append('author', requestParameters.author);
                        }
                        if (requestParameters.excerpt !== undefined) {
                            formParams.append('excerpt', requestParameters.excerpt);
                        }
                        if (requestParameters.featured_media !== undefined) {
                            formParams.append('featured_media', requestParameters.featured_media);
                        }
                        if (requestParameters.comment_status !== undefined) {
                            formParams.append('comment_status', requestParameters.comment_status);
                        }
                        if (requestParameters.ping_status !== undefined) {
                            formParams.append('ping_status', requestParameters.ping_status);
                        }
                        if (requestParameters.format !== undefined) {
                            formParams.append('format', requestParameters.format);
                        }
                        if (requestParameters.meta !== undefined) {
                            formParams.append('meta', requestParameters.meta);
                        }
                        if (requestParameters.sticky !== undefined) {
                            formParams.append('sticky', requestParameters.sticky);
                        }
                        if (requestParameters.template !== undefined) {
                            formParams.append('template', requestParameters.template);
                        }
                        if (requestParameters.categories !== undefined) {
                            formParams.append('categories', requestParameters.categories);
                        }
                        if (requestParameters.tags !== undefined) {
                            formParams.append('tags', requestParameters.tags);
                        }
                        return [4 /*yield*/, this.request({
                                path: "/wp/v2/posts",
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: formParams,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return PostFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.postWpV2Posts = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.postWpV2PostsRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.postWpV2PostsByIdRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, consumes, canConsumeForm, formParams, useForm, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.id2 === null || requestParameters.id2 === undefined) {
                            throw new runtime.RequiredError('id2', 'Required parameter requestParameters.id2 was null or undefined when calling postWpV2PostsById.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
                        }
                        consumes = [
                            { contentType: 'multipart/form-data' },
                        ];
                        canConsumeForm = runtime.canConsumeForm(consumes);
                        useForm = false;
                        if (useForm) {
                            formParams = new FormData();
                        }
                        else {
                            formParams = new URLSearchParams();
                        }
                        if (requestParameters.id !== undefined) {
                            formParams.append('id', requestParameters.id);
                        }
                        if (requestParameters.date !== undefined) {
                            formParams.append('date', requestParameters.date);
                        }
                        if (requestParameters.date_gmt !== undefined) {
                            formParams.append('date_gmt', requestParameters.date_gmt);
                        }
                        if (requestParameters.slug !== undefined) {
                            formParams.append('slug', requestParameters.slug);
                        }
                        if (requestParameters.status !== undefined) {
                            formParams.append('status', requestParameters.status);
                        }
                        if (requestParameters.password !== undefined) {
                            formParams.append('password', requestParameters.password);
                        }
                        if (requestParameters.title !== undefined) {
                            formParams.append('title', requestParameters.title);
                        }
                        if (requestParameters.content !== undefined) {
                            formParams.append('content', requestParameters.content);
                        }
                        if (requestParameters.author !== undefined) {
                            formParams.append('author', requestParameters.author);
                        }
                        if (requestParameters.excerpt !== undefined) {
                            formParams.append('excerpt', requestParameters.excerpt);
                        }
                        if (requestParameters.featured_media !== undefined) {
                            formParams.append('featured_media', requestParameters.featured_media);
                        }
                        if (requestParameters.comment_status !== undefined) {
                            formParams.append('comment_status', requestParameters.comment_status);
                        }
                        if (requestParameters.ping_status !== undefined) {
                            formParams.append('ping_status', requestParameters.ping_status);
                        }
                        if (requestParameters.format !== undefined) {
                            formParams.append('format', requestParameters.format);
                        }
                        if (requestParameters.meta !== undefined) {
                            formParams.append('meta', requestParameters.meta);
                        }
                        if (requestParameters.sticky !== undefined) {
                            formParams.append('sticky', requestParameters.sticky);
                        }
                        if (requestParameters.template !== undefined) {
                            formParams.append('template', requestParameters.template);
                        }
                        if (requestParameters.categories !== undefined) {
                            formParams.append('categories', requestParameters.categories);
                        }
                        if (requestParameters.tags !== undefined) {
                            formParams.append('tags', requestParameters.tags);
                        }
                        return [4 /*yield*/, this.request({
                                path: "/wp/v2/posts/{id}".replace("{" + "id" + "}", encodeURIComponent(String(requestParameters.id2))),
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: formParams,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return PostFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.postWpV2PostsById = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.postWpV2PostsByIdRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.postWpV2PostsByIdAutosavesRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, consumes, canConsumeForm, formParams, useForm, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.id === null || requestParameters.id === undefined) {
                            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling postWpV2PostsByIdAutosaves.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
                        }
                        consumes = [
                            { contentType: 'multipart/form-data' },
                        ];
                        canConsumeForm = runtime.canConsumeForm(consumes);
                        useForm = false;
                        if (useForm) {
                            formParams = new FormData();
                        }
                        else {
                            formParams = new URLSearchParams();
                        }
                        if (requestParameters.parent !== undefined) {
                            formParams.append('parent', requestParameters.parent);
                        }
                        if (requestParameters.date !== undefined) {
                            formParams.append('date', requestParameters.date);
                        }
                        if (requestParameters.date_gmt !== undefined) {
                            formParams.append('date_gmt', requestParameters.date_gmt);
                        }
                        if (requestParameters.slug !== undefined) {
                            formParams.append('slug', requestParameters.slug);
                        }
                        if (requestParameters.status !== undefined) {
                            formParams.append('status', requestParameters.status);
                        }
                        if (requestParameters.password !== undefined) {
                            formParams.append('password', requestParameters.password);
                        }
                        if (requestParameters.title !== undefined) {
                            formParams.append('title', requestParameters.title);
                        }
                        if (requestParameters.content !== undefined) {
                            formParams.append('content', requestParameters.content);
                        }
                        if (requestParameters.author !== undefined) {
                            formParams.append('author', requestParameters.author);
                        }
                        if (requestParameters.excerpt !== undefined) {
                            formParams.append('excerpt', requestParameters.excerpt);
                        }
                        if (requestParameters.featured_media !== undefined) {
                            formParams.append('featured_media', requestParameters.featured_media);
                        }
                        if (requestParameters.comment_status !== undefined) {
                            formParams.append('comment_status', requestParameters.comment_status);
                        }
                        if (requestParameters.ping_status !== undefined) {
                            formParams.append('ping_status', requestParameters.ping_status);
                        }
                        if (requestParameters.format !== undefined) {
                            formParams.append('format', requestParameters.format);
                        }
                        if (requestParameters.meta !== undefined) {
                            formParams.append('meta', requestParameters.meta);
                        }
                        if (requestParameters.sticky !== undefined) {
                            formParams.append('sticky', requestParameters.sticky);
                        }
                        if (requestParameters.template !== undefined) {
                            formParams.append('template', requestParameters.template);
                        }
                        if (requestParameters.categories !== undefined) {
                            formParams.append('categories', requestParameters.categories);
                        }
                        if (requestParameters.tags !== undefined) {
                            formParams.append('tags', requestParameters.tags);
                        }
                        return [4 /*yield*/, this.request({
                                path: "/wp/v2/posts/{id}/autosaves".replace("{" + "id" + "}", encodeURIComponent(String(requestParameters.id))),
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: formParams,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return PostRevisionFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.postWpV2PostsByIdAutosaves = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.postWpV2PostsByIdAutosavesRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.postWpV2SettingsRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, consumes, canConsumeForm, formParams, useForm, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
                        }
                        consumes = [
                            { contentType: 'multipart/form-data' },
                        ];
                        canConsumeForm = runtime.canConsumeForm(consumes);
                        useForm = false;
                        if (useForm) {
                            formParams = new FormData();
                        }
                        else {
                            formParams = new URLSearchParams();
                        }
                        if (requestParameters.title !== undefined) {
                            formParams.append('title', requestParameters.title);
                        }
                        if (requestParameters.description !== undefined) {
                            formParams.append('description', requestParameters.description);
                        }
                        if (requestParameters.url !== undefined) {
                            formParams.append('url', requestParameters.url);
                        }
                        if (requestParameters.email !== undefined) {
                            formParams.append('email', requestParameters.email);
                        }
                        if (requestParameters.timezone !== undefined) {
                            formParams.append('timezone', requestParameters.timezone);
                        }
                        if (requestParameters.date_format !== undefined) {
                            formParams.append('date_format', requestParameters.date_format);
                        }
                        if (requestParameters.time_format !== undefined) {
                            formParams.append('time_format', requestParameters.time_format);
                        }
                        if (requestParameters.start_of_week !== undefined) {
                            formParams.append('start_of_week', requestParameters.start_of_week);
                        }
                        if (requestParameters.language !== undefined) {
                            formParams.append('language', requestParameters.language);
                        }
                        if (requestParameters.use_smilies !== undefined) {
                            formParams.append('use_smilies', requestParameters.use_smilies);
                        }
                        if (requestParameters.default_category !== undefined) {
                            formParams.append('default_category', requestParameters.default_category);
                        }
                        if (requestParameters.default_post_format !== undefined) {
                            formParams.append('default_post_format', requestParameters.default_post_format);
                        }
                        if (requestParameters.posts_per_page !== undefined) {
                            formParams.append('posts_per_page', requestParameters.posts_per_page);
                        }
                        if (requestParameters.default_ping_status !== undefined) {
                            formParams.append('default_ping_status', requestParameters.default_ping_status);
                        }
                        if (requestParameters.default_comment_status !== undefined) {
                            formParams.append('default_comment_status', requestParameters.default_comment_status);
                        }
                        return [4 /*yield*/, this.request({
                                path: "/wp/v2/settings",
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: formParams,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return SettingsFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.postWpV2Settings = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.postWpV2SettingsRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.postWpV2TagsRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, consumes, canConsumeForm, formParams, useForm, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.name === null || requestParameters.name === undefined) {
                            throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling postWpV2Tags.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
                        }
                        consumes = [
                            { contentType: 'multipart/form-data' },
                        ];
                        canConsumeForm = runtime.canConsumeForm(consumes);
                        useForm = false;
                        if (useForm) {
                            formParams = new FormData();
                        }
                        else {
                            formParams = new URLSearchParams();
                        }
                        if (requestParameters.description !== undefined) {
                            formParams.append('description', requestParameters.description);
                        }
                        if (requestParameters.name !== undefined) {
                            formParams.append('name', requestParameters.name);
                        }
                        if (requestParameters.slug !== undefined) {
                            formParams.append('slug', requestParameters.slug);
                        }
                        if (requestParameters.meta !== undefined) {
                            formParams.append('meta', requestParameters.meta);
                        }
                        return [4 /*yield*/, this.request({
                                path: "/wp/v2/tags",
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: formParams,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return TagFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.postWpV2Tags = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.postWpV2TagsRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.postWpV2TagsByIdRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, consumes, canConsumeForm, formParams, useForm, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.id2 === null || requestParameters.id2 === undefined) {
                            throw new runtime.RequiredError('id2', 'Required parameter requestParameters.id2 was null or undefined when calling postWpV2TagsById.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
                        }
                        consumes = [
                            { contentType: 'multipart/form-data' },
                        ];
                        canConsumeForm = runtime.canConsumeForm(consumes);
                        useForm = false;
                        if (useForm) {
                            formParams = new FormData();
                        }
                        else {
                            formParams = new URLSearchParams();
                        }
                        if (requestParameters.id !== undefined) {
                            formParams.append('id', requestParameters.id);
                        }
                        if (requestParameters.description !== undefined) {
                            formParams.append('description', requestParameters.description);
                        }
                        if (requestParameters.name !== undefined) {
                            formParams.append('name', requestParameters.name);
                        }
                        if (requestParameters.slug !== undefined) {
                            formParams.append('slug', requestParameters.slug);
                        }
                        if (requestParameters.meta !== undefined) {
                            formParams.append('meta', requestParameters.meta);
                        }
                        return [4 /*yield*/, this.request({
                                path: "/wp/v2/tags/{id}".replace("{" + "id" + "}", encodeURIComponent(String(requestParameters.id2))),
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: formParams,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return TagFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.postWpV2TagsById = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.postWpV2TagsByIdRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.postWpV2UsersRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, consumes, canConsumeForm, formParams, useForm, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.username === null || requestParameters.username === undefined) {
                            throw new runtime.RequiredError('username', 'Required parameter requestParameters.username was null or undefined when calling postWpV2Users.');
                        }
                        if (requestParameters.email === null || requestParameters.email === undefined) {
                            throw new runtime.RequiredError('email', 'Required parameter requestParameters.email was null or undefined when calling postWpV2Users.');
                        }
                        if (requestParameters.password === null || requestParameters.password === undefined) {
                            throw new runtime.RequiredError('password', 'Required parameter requestParameters.password was null or undefined when calling postWpV2Users.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
                        }
                        consumes = [
                            { contentType: 'multipart/form-data' },
                        ];
                        canConsumeForm = runtime.canConsumeForm(consumes);
                        useForm = false;
                        if (useForm) {
                            formParams = new FormData();
                        }
                        else {
                            formParams = new URLSearchParams();
                        }
                        if (requestParameters.username !== undefined) {
                            formParams.append('username', requestParameters.username);
                        }
                        if (requestParameters.name !== undefined) {
                            formParams.append('name', requestParameters.name);
                        }
                        if (requestParameters.first_name !== undefined) {
                            formParams.append('first_name', requestParameters.first_name);
                        }
                        if (requestParameters.last_name !== undefined) {
                            formParams.append('last_name', requestParameters.last_name);
                        }
                        if (requestParameters.email !== undefined) {
                            formParams.append('email', requestParameters.email);
                        }
                        if (requestParameters.url !== undefined) {
                            formParams.append('url', requestParameters.url);
                        }
                        if (requestParameters.description !== undefined) {
                            formParams.append('description', requestParameters.description);
                        }
                        if (requestParameters.locale !== undefined) {
                            formParams.append('locale', requestParameters.locale);
                        }
                        if (requestParameters.nickname !== undefined) {
                            formParams.append('nickname', requestParameters.nickname);
                        }
                        if (requestParameters.slug !== undefined) {
                            formParams.append('slug', requestParameters.slug);
                        }
                        if (requestParameters.roles !== undefined) {
                            formParams.append('roles', requestParameters.roles);
                        }
                        if (requestParameters.password !== undefined) {
                            formParams.append('password', requestParameters.password);
                        }
                        if (requestParameters.meta !== undefined) {
                            formParams.append('meta', requestParameters.meta);
                        }
                        return [4 /*yield*/, this.request({
                                path: "/wp/v2/users",
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: formParams,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return UserFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.postWpV2Users = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.postWpV2UsersRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.postWpV2UsersByIdRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, consumes, canConsumeForm, formParams, useForm, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (requestParameters.id2 === null || requestParameters.id2 === undefined) {
                            throw new runtime.RequiredError('id2', 'Required parameter requestParameters.id2 was null or undefined when calling postWpV2UsersById.');
                        }
                        queryParameters = {};
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
                        }
                        consumes = [
                            { contentType: 'multipart/form-data' },
                        ];
                        canConsumeForm = runtime.canConsumeForm(consumes);
                        useForm = false;
                        if (useForm) {
                            formParams = new FormData();
                        }
                        else {
                            formParams = new URLSearchParams();
                        }
                        if (requestParameters.id !== undefined) {
                            formParams.append('id', requestParameters.id);
                        }
                        if (requestParameters.username !== undefined) {
                            formParams.append('username', requestParameters.username);
                        }
                        if (requestParameters.name !== undefined) {
                            formParams.append('name', requestParameters.name);
                        }
                        if (requestParameters.first_name !== undefined) {
                            formParams.append('first_name', requestParameters.first_name);
                        }
                        if (requestParameters.last_name !== undefined) {
                            formParams.append('last_name', requestParameters.last_name);
                        }
                        if (requestParameters.email !== undefined) {
                            formParams.append('email', requestParameters.email);
                        }
                        if (requestParameters.url !== undefined) {
                            formParams.append('url', requestParameters.url);
                        }
                        if (requestParameters.description !== undefined) {
                            formParams.append('description', requestParameters.description);
                        }
                        if (requestParameters.locale !== undefined) {
                            formParams.append('locale', requestParameters.locale);
                        }
                        if (requestParameters.nickname !== undefined) {
                            formParams.append('nickname', requestParameters.nickname);
                        }
                        if (requestParameters.slug !== undefined) {
                            formParams.append('slug', requestParameters.slug);
                        }
                        if (requestParameters.roles !== undefined) {
                            formParams.append('roles', requestParameters.roles);
                        }
                        if (requestParameters.password !== undefined) {
                            formParams.append('password', requestParameters.password);
                        }
                        if (requestParameters.meta !== undefined) {
                            formParams.append('meta', requestParameters.meta);
                        }
                        return [4 /*yield*/, this.request({
                                path: "/wp/v2/users/{id}".replace("{" + "id" + "}", encodeURIComponent(String(requestParameters.id2))),
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: formParams,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return UserFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.postWpV2UsersById = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.postWpV2UsersByIdRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.postWpV2UsersMeRaw = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParameters, headerParameters, consumes, canConsumeForm, formParams, useForm, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParameters = {};
                        headerParameters = {};
                        if (this.configuration && this.configuration.apiKey) {
                            headerParameters["X-WP-Nonce"] = this.configuration.apiKey("X-WP-Nonce"); // cookieAuth authentication
                        }
                        consumes = [
                            { contentType: 'multipart/form-data' },
                        ];
                        canConsumeForm = runtime.canConsumeForm(consumes);
                        useForm = false;
                        if (useForm) {
                            formParams = new FormData();
                        }
                        else {
                            formParams = new URLSearchParams();
                        }
                        if (requestParameters.username !== undefined) {
                            formParams.append('username', requestParameters.username);
                        }
                        if (requestParameters.name !== undefined) {
                            formParams.append('name', requestParameters.name);
                        }
                        if (requestParameters.first_name !== undefined) {
                            formParams.append('first_name', requestParameters.first_name);
                        }
                        if (requestParameters.last_name !== undefined) {
                            formParams.append('last_name', requestParameters.last_name);
                        }
                        if (requestParameters.email !== undefined) {
                            formParams.append('email', requestParameters.email);
                        }
                        if (requestParameters.url !== undefined) {
                            formParams.append('url', requestParameters.url);
                        }
                        if (requestParameters.description !== undefined) {
                            formParams.append('description', requestParameters.description);
                        }
                        if (requestParameters.locale !== undefined) {
                            formParams.append('locale', requestParameters.locale);
                        }
                        if (requestParameters.nickname !== undefined) {
                            formParams.append('nickname', requestParameters.nickname);
                        }
                        if (requestParameters.slug !== undefined) {
                            formParams.append('slug', requestParameters.slug);
                        }
                        if (requestParameters.roles !== undefined) {
                            formParams.append('roles', requestParameters.roles);
                        }
                        if (requestParameters.password !== undefined) {
                            formParams.append('password', requestParameters.password);
                        }
                        if (requestParameters.meta !== undefined) {
                            formParams.append('meta', requestParameters.meta);
                        }
                        return [4 /*yield*/, this.request({
                                path: "/wp/v2/users/me",
                                method: 'POST',
                                headers: headerParameters,
                                query: queryParameters,
                                body: formParams,
                            })];
                    case 1:
                        response = _a.sent();
                        return [2 /*return*/, new runtime.JSONApiResponse(response, function (jsonValue) { return UserFromJSON(jsonValue); })];
                }
            });
        });
    };
    /**
     */
    DefaultApi.prototype.postWpV2UsersMe = function (requestParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.postWpV2UsersMeRaw(requestParameters)];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.value()];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return DefaultApi;
}(runtime.BaseAPI));
export { DefaultApi };
/**
    * @export
    * @enum {string}
    */
export var GetWpV2BlockRendererByNameContextEnum;
(function (GetWpV2BlockRendererByNameContextEnum) {
    GetWpV2BlockRendererByNameContextEnum["Edit"] = "edit";
    GetWpV2BlockRendererByNameContextEnum["View"] = "view";
})(GetWpV2BlockRendererByNameContextEnum || (GetWpV2BlockRendererByNameContextEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var GetWpV2BlocksContextEnum;
(function (GetWpV2BlocksContextEnum) {
    GetWpV2BlocksContextEnum["View"] = "view";
    GetWpV2BlocksContextEnum["Embed"] = "embed";
    GetWpV2BlocksContextEnum["Edit"] = "edit";
})(GetWpV2BlocksContextEnum || (GetWpV2BlocksContextEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var GetWpV2BlocksOrderEnum;
(function (GetWpV2BlocksOrderEnum) {
    GetWpV2BlocksOrderEnum["Asc"] = "asc";
    GetWpV2BlocksOrderEnum["Desc"] = "desc";
})(GetWpV2BlocksOrderEnum || (GetWpV2BlocksOrderEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var GetWpV2BlocksOrderbyEnum;
(function (GetWpV2BlocksOrderbyEnum) {
    GetWpV2BlocksOrderbyEnum["Author"] = "author";
    GetWpV2BlocksOrderbyEnum["Date"] = "date";
    GetWpV2BlocksOrderbyEnum["Id"] = "id";
    GetWpV2BlocksOrderbyEnum["Include"] = "include";
    GetWpV2BlocksOrderbyEnum["Modified"] = "modified";
    GetWpV2BlocksOrderbyEnum["Parent"] = "parent";
    GetWpV2BlocksOrderbyEnum["Relevance"] = "relevance";
    GetWpV2BlocksOrderbyEnum["Slug"] = "slug";
    GetWpV2BlocksOrderbyEnum["IncludeSlugs"] = "include_slugs";
    GetWpV2BlocksOrderbyEnum["Title"] = "title";
})(GetWpV2BlocksOrderbyEnum || (GetWpV2BlocksOrderbyEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var GetWpV2BlocksByIdContextEnum;
(function (GetWpV2BlocksByIdContextEnum) {
    GetWpV2BlocksByIdContextEnum["View"] = "view";
    GetWpV2BlocksByIdContextEnum["Embed"] = "embed";
    GetWpV2BlocksByIdContextEnum["Edit"] = "edit";
})(GetWpV2BlocksByIdContextEnum || (GetWpV2BlocksByIdContextEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var GetWpV2BlocksByIdAutosavesContextEnum;
(function (GetWpV2BlocksByIdAutosavesContextEnum) {
    GetWpV2BlocksByIdAutosavesContextEnum["View"] = "view";
    GetWpV2BlocksByIdAutosavesContextEnum["Embed"] = "embed";
    GetWpV2BlocksByIdAutosavesContextEnum["Edit"] = "edit";
})(GetWpV2BlocksByIdAutosavesContextEnum || (GetWpV2BlocksByIdAutosavesContextEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var GetWpV2BlocksByParentAutosavesByIdContextEnum;
(function (GetWpV2BlocksByParentAutosavesByIdContextEnum) {
    GetWpV2BlocksByParentAutosavesByIdContextEnum["View"] = "view";
    GetWpV2BlocksByParentAutosavesByIdContextEnum["Embed"] = "embed";
    GetWpV2BlocksByParentAutosavesByIdContextEnum["Edit"] = "edit";
})(GetWpV2BlocksByParentAutosavesByIdContextEnum || (GetWpV2BlocksByParentAutosavesByIdContextEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var GetWpV2CategoriesContextEnum;
(function (GetWpV2CategoriesContextEnum) {
    GetWpV2CategoriesContextEnum["View"] = "view";
    GetWpV2CategoriesContextEnum["Embed"] = "embed";
    GetWpV2CategoriesContextEnum["Edit"] = "edit";
})(GetWpV2CategoriesContextEnum || (GetWpV2CategoriesContextEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var GetWpV2CategoriesOrderEnum;
(function (GetWpV2CategoriesOrderEnum) {
    GetWpV2CategoriesOrderEnum["Asc"] = "asc";
    GetWpV2CategoriesOrderEnum["Desc"] = "desc";
})(GetWpV2CategoriesOrderEnum || (GetWpV2CategoriesOrderEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var GetWpV2CategoriesOrderbyEnum;
(function (GetWpV2CategoriesOrderbyEnum) {
    GetWpV2CategoriesOrderbyEnum["Id"] = "id";
    GetWpV2CategoriesOrderbyEnum["Include"] = "include";
    GetWpV2CategoriesOrderbyEnum["Name"] = "name";
    GetWpV2CategoriesOrderbyEnum["Slug"] = "slug";
    GetWpV2CategoriesOrderbyEnum["IncludeSlugs"] = "include_slugs";
    GetWpV2CategoriesOrderbyEnum["TermGroup"] = "term_group";
    GetWpV2CategoriesOrderbyEnum["Description"] = "description";
    GetWpV2CategoriesOrderbyEnum["Count"] = "count";
})(GetWpV2CategoriesOrderbyEnum || (GetWpV2CategoriesOrderbyEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var GetWpV2CategoriesByIdContextEnum;
(function (GetWpV2CategoriesByIdContextEnum) {
    GetWpV2CategoriesByIdContextEnum["View"] = "view";
    GetWpV2CategoriesByIdContextEnum["Embed"] = "embed";
    GetWpV2CategoriesByIdContextEnum["Edit"] = "edit";
})(GetWpV2CategoriesByIdContextEnum || (GetWpV2CategoriesByIdContextEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var GetWpV2CommentsContextEnum;
(function (GetWpV2CommentsContextEnum) {
    GetWpV2CommentsContextEnum["View"] = "view";
    GetWpV2CommentsContextEnum["Embed"] = "embed";
    GetWpV2CommentsContextEnum["Edit"] = "edit";
})(GetWpV2CommentsContextEnum || (GetWpV2CommentsContextEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var GetWpV2CommentsOrderEnum;
(function (GetWpV2CommentsOrderEnum) {
    GetWpV2CommentsOrderEnum["Asc"] = "asc";
    GetWpV2CommentsOrderEnum["Desc"] = "desc";
})(GetWpV2CommentsOrderEnum || (GetWpV2CommentsOrderEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var GetWpV2CommentsOrderbyEnum;
(function (GetWpV2CommentsOrderbyEnum) {
    GetWpV2CommentsOrderbyEnum["Date"] = "date";
    GetWpV2CommentsOrderbyEnum["DateGmt"] = "date_gmt";
    GetWpV2CommentsOrderbyEnum["Id"] = "id";
    GetWpV2CommentsOrderbyEnum["Include"] = "include";
    GetWpV2CommentsOrderbyEnum["Post"] = "post";
    GetWpV2CommentsOrderbyEnum["Parent"] = "parent";
    GetWpV2CommentsOrderbyEnum["Type"] = "type";
})(GetWpV2CommentsOrderbyEnum || (GetWpV2CommentsOrderbyEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var GetWpV2CommentsByIdContextEnum;
(function (GetWpV2CommentsByIdContextEnum) {
    GetWpV2CommentsByIdContextEnum["View"] = "view";
    GetWpV2CommentsByIdContextEnum["Embed"] = "embed";
    GetWpV2CommentsByIdContextEnum["Edit"] = "edit";
})(GetWpV2CommentsByIdContextEnum || (GetWpV2CommentsByIdContextEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var GetWpV2MediaContextEnum;
(function (GetWpV2MediaContextEnum) {
    GetWpV2MediaContextEnum["View"] = "view";
    GetWpV2MediaContextEnum["Embed"] = "embed";
    GetWpV2MediaContextEnum["Edit"] = "edit";
})(GetWpV2MediaContextEnum || (GetWpV2MediaContextEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var GetWpV2MediaOrderEnum;
(function (GetWpV2MediaOrderEnum) {
    GetWpV2MediaOrderEnum["Asc"] = "asc";
    GetWpV2MediaOrderEnum["Desc"] = "desc";
})(GetWpV2MediaOrderEnum || (GetWpV2MediaOrderEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var GetWpV2MediaOrderbyEnum;
(function (GetWpV2MediaOrderbyEnum) {
    GetWpV2MediaOrderbyEnum["Author"] = "author";
    GetWpV2MediaOrderbyEnum["Date"] = "date";
    GetWpV2MediaOrderbyEnum["Id"] = "id";
    GetWpV2MediaOrderbyEnum["Include"] = "include";
    GetWpV2MediaOrderbyEnum["Modified"] = "modified";
    GetWpV2MediaOrderbyEnum["Parent"] = "parent";
    GetWpV2MediaOrderbyEnum["Relevance"] = "relevance";
    GetWpV2MediaOrderbyEnum["Slug"] = "slug";
    GetWpV2MediaOrderbyEnum["IncludeSlugs"] = "include_slugs";
    GetWpV2MediaOrderbyEnum["Title"] = "title";
})(GetWpV2MediaOrderbyEnum || (GetWpV2MediaOrderbyEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var GetWpV2MediaMediaTypeEnum;
(function (GetWpV2MediaMediaTypeEnum) {
    GetWpV2MediaMediaTypeEnum["Image"] = "image";
    GetWpV2MediaMediaTypeEnum["Video"] = "video";
    GetWpV2MediaMediaTypeEnum["Text"] = "text";
    GetWpV2MediaMediaTypeEnum["Application"] = "application";
    GetWpV2MediaMediaTypeEnum["Audio"] = "audio";
})(GetWpV2MediaMediaTypeEnum || (GetWpV2MediaMediaTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var GetWpV2MediaByIdContextEnum;
(function (GetWpV2MediaByIdContextEnum) {
    GetWpV2MediaByIdContextEnum["View"] = "view";
    GetWpV2MediaByIdContextEnum["Embed"] = "embed";
    GetWpV2MediaByIdContextEnum["Edit"] = "edit";
})(GetWpV2MediaByIdContextEnum || (GetWpV2MediaByIdContextEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var GetWpV2PagesContextEnum;
(function (GetWpV2PagesContextEnum) {
    GetWpV2PagesContextEnum["View"] = "view";
    GetWpV2PagesContextEnum["Embed"] = "embed";
    GetWpV2PagesContextEnum["Edit"] = "edit";
})(GetWpV2PagesContextEnum || (GetWpV2PagesContextEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var GetWpV2PagesOrderEnum;
(function (GetWpV2PagesOrderEnum) {
    GetWpV2PagesOrderEnum["Asc"] = "asc";
    GetWpV2PagesOrderEnum["Desc"] = "desc";
})(GetWpV2PagesOrderEnum || (GetWpV2PagesOrderEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var GetWpV2PagesOrderbyEnum;
(function (GetWpV2PagesOrderbyEnum) {
    GetWpV2PagesOrderbyEnum["Author"] = "author";
    GetWpV2PagesOrderbyEnum["Date"] = "date";
    GetWpV2PagesOrderbyEnum["Id"] = "id";
    GetWpV2PagesOrderbyEnum["Include"] = "include";
    GetWpV2PagesOrderbyEnum["Modified"] = "modified";
    GetWpV2PagesOrderbyEnum["Parent"] = "parent";
    GetWpV2PagesOrderbyEnum["Relevance"] = "relevance";
    GetWpV2PagesOrderbyEnum["Slug"] = "slug";
    GetWpV2PagesOrderbyEnum["IncludeSlugs"] = "include_slugs";
    GetWpV2PagesOrderbyEnum["Title"] = "title";
    GetWpV2PagesOrderbyEnum["MenuOrder"] = "menu_order";
})(GetWpV2PagesOrderbyEnum || (GetWpV2PagesOrderbyEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var GetWpV2PagesByIdContextEnum;
(function (GetWpV2PagesByIdContextEnum) {
    GetWpV2PagesByIdContextEnum["View"] = "view";
    GetWpV2PagesByIdContextEnum["Embed"] = "embed";
    GetWpV2PagesByIdContextEnum["Edit"] = "edit";
})(GetWpV2PagesByIdContextEnum || (GetWpV2PagesByIdContextEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var GetWpV2PagesByIdAutosavesContextEnum;
(function (GetWpV2PagesByIdAutosavesContextEnum) {
    GetWpV2PagesByIdAutosavesContextEnum["View"] = "view";
    GetWpV2PagesByIdAutosavesContextEnum["Embed"] = "embed";
    GetWpV2PagesByIdAutosavesContextEnum["Edit"] = "edit";
})(GetWpV2PagesByIdAutosavesContextEnum || (GetWpV2PagesByIdAutosavesContextEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var GetWpV2PagesByParentAutosavesByIdContextEnum;
(function (GetWpV2PagesByParentAutosavesByIdContextEnum) {
    GetWpV2PagesByParentAutosavesByIdContextEnum["View"] = "view";
    GetWpV2PagesByParentAutosavesByIdContextEnum["Embed"] = "embed";
    GetWpV2PagesByParentAutosavesByIdContextEnum["Edit"] = "edit";
})(GetWpV2PagesByParentAutosavesByIdContextEnum || (GetWpV2PagesByParentAutosavesByIdContextEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var GetWpV2PagesByParentRevisionsContextEnum;
(function (GetWpV2PagesByParentRevisionsContextEnum) {
    GetWpV2PagesByParentRevisionsContextEnum["View"] = "view";
    GetWpV2PagesByParentRevisionsContextEnum["Embed"] = "embed";
    GetWpV2PagesByParentRevisionsContextEnum["Edit"] = "edit";
})(GetWpV2PagesByParentRevisionsContextEnum || (GetWpV2PagesByParentRevisionsContextEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var GetWpV2PagesByParentRevisionsOrderEnum;
(function (GetWpV2PagesByParentRevisionsOrderEnum) {
    GetWpV2PagesByParentRevisionsOrderEnum["Asc"] = "asc";
    GetWpV2PagesByParentRevisionsOrderEnum["Desc"] = "desc";
})(GetWpV2PagesByParentRevisionsOrderEnum || (GetWpV2PagesByParentRevisionsOrderEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var GetWpV2PagesByParentRevisionsOrderbyEnum;
(function (GetWpV2PagesByParentRevisionsOrderbyEnum) {
    GetWpV2PagesByParentRevisionsOrderbyEnum["Date"] = "date";
    GetWpV2PagesByParentRevisionsOrderbyEnum["Id"] = "id";
    GetWpV2PagesByParentRevisionsOrderbyEnum["Include"] = "include";
    GetWpV2PagesByParentRevisionsOrderbyEnum["Relevance"] = "relevance";
    GetWpV2PagesByParentRevisionsOrderbyEnum["Slug"] = "slug";
    GetWpV2PagesByParentRevisionsOrderbyEnum["IncludeSlugs"] = "include_slugs";
    GetWpV2PagesByParentRevisionsOrderbyEnum["Title"] = "title";
})(GetWpV2PagesByParentRevisionsOrderbyEnum || (GetWpV2PagesByParentRevisionsOrderbyEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var GetWpV2PagesByParentRevisionsByIdContextEnum;
(function (GetWpV2PagesByParentRevisionsByIdContextEnum) {
    GetWpV2PagesByParentRevisionsByIdContextEnum["View"] = "view";
    GetWpV2PagesByParentRevisionsByIdContextEnum["Embed"] = "embed";
    GetWpV2PagesByParentRevisionsByIdContextEnum["Edit"] = "edit";
})(GetWpV2PagesByParentRevisionsByIdContextEnum || (GetWpV2PagesByParentRevisionsByIdContextEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var GetWpV2PostsContextEnum;
(function (GetWpV2PostsContextEnum) {
    GetWpV2PostsContextEnum["View"] = "view";
    GetWpV2PostsContextEnum["Embed"] = "embed";
    GetWpV2PostsContextEnum["Edit"] = "edit";
})(GetWpV2PostsContextEnum || (GetWpV2PostsContextEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var GetWpV2PostsOrderEnum;
(function (GetWpV2PostsOrderEnum) {
    GetWpV2PostsOrderEnum["Asc"] = "asc";
    GetWpV2PostsOrderEnum["Desc"] = "desc";
})(GetWpV2PostsOrderEnum || (GetWpV2PostsOrderEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var GetWpV2PostsOrderbyEnum;
(function (GetWpV2PostsOrderbyEnum) {
    GetWpV2PostsOrderbyEnum["Author"] = "author";
    GetWpV2PostsOrderbyEnum["Date"] = "date";
    GetWpV2PostsOrderbyEnum["Id"] = "id";
    GetWpV2PostsOrderbyEnum["Include"] = "include";
    GetWpV2PostsOrderbyEnum["Modified"] = "modified";
    GetWpV2PostsOrderbyEnum["Parent"] = "parent";
    GetWpV2PostsOrderbyEnum["Relevance"] = "relevance";
    GetWpV2PostsOrderbyEnum["Slug"] = "slug";
    GetWpV2PostsOrderbyEnum["IncludeSlugs"] = "include_slugs";
    GetWpV2PostsOrderbyEnum["Title"] = "title";
})(GetWpV2PostsOrderbyEnum || (GetWpV2PostsOrderbyEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var GetWpV2PostsByIdContextEnum;
(function (GetWpV2PostsByIdContextEnum) {
    GetWpV2PostsByIdContextEnum["View"] = "view";
    GetWpV2PostsByIdContextEnum["Embed"] = "embed";
    GetWpV2PostsByIdContextEnum["Edit"] = "edit";
})(GetWpV2PostsByIdContextEnum || (GetWpV2PostsByIdContextEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var GetWpV2PostsByIdAutosavesContextEnum;
(function (GetWpV2PostsByIdAutosavesContextEnum) {
    GetWpV2PostsByIdAutosavesContextEnum["View"] = "view";
    GetWpV2PostsByIdAutosavesContextEnum["Embed"] = "embed";
    GetWpV2PostsByIdAutosavesContextEnum["Edit"] = "edit";
})(GetWpV2PostsByIdAutosavesContextEnum || (GetWpV2PostsByIdAutosavesContextEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var GetWpV2PostsByParentAutosavesByIdContextEnum;
(function (GetWpV2PostsByParentAutosavesByIdContextEnum) {
    GetWpV2PostsByParentAutosavesByIdContextEnum["View"] = "view";
    GetWpV2PostsByParentAutosavesByIdContextEnum["Embed"] = "embed";
    GetWpV2PostsByParentAutosavesByIdContextEnum["Edit"] = "edit";
})(GetWpV2PostsByParentAutosavesByIdContextEnum || (GetWpV2PostsByParentAutosavesByIdContextEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var GetWpV2PostsByParentRevisionsContextEnum;
(function (GetWpV2PostsByParentRevisionsContextEnum) {
    GetWpV2PostsByParentRevisionsContextEnum["View"] = "view";
    GetWpV2PostsByParentRevisionsContextEnum["Embed"] = "embed";
    GetWpV2PostsByParentRevisionsContextEnum["Edit"] = "edit";
})(GetWpV2PostsByParentRevisionsContextEnum || (GetWpV2PostsByParentRevisionsContextEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var GetWpV2PostsByParentRevisionsOrderEnum;
(function (GetWpV2PostsByParentRevisionsOrderEnum) {
    GetWpV2PostsByParentRevisionsOrderEnum["Asc"] = "asc";
    GetWpV2PostsByParentRevisionsOrderEnum["Desc"] = "desc";
})(GetWpV2PostsByParentRevisionsOrderEnum || (GetWpV2PostsByParentRevisionsOrderEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var GetWpV2PostsByParentRevisionsOrderbyEnum;
(function (GetWpV2PostsByParentRevisionsOrderbyEnum) {
    GetWpV2PostsByParentRevisionsOrderbyEnum["Date"] = "date";
    GetWpV2PostsByParentRevisionsOrderbyEnum["Id"] = "id";
    GetWpV2PostsByParentRevisionsOrderbyEnum["Include"] = "include";
    GetWpV2PostsByParentRevisionsOrderbyEnum["Relevance"] = "relevance";
    GetWpV2PostsByParentRevisionsOrderbyEnum["Slug"] = "slug";
    GetWpV2PostsByParentRevisionsOrderbyEnum["IncludeSlugs"] = "include_slugs";
    GetWpV2PostsByParentRevisionsOrderbyEnum["Title"] = "title";
})(GetWpV2PostsByParentRevisionsOrderbyEnum || (GetWpV2PostsByParentRevisionsOrderbyEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var GetWpV2PostsByParentRevisionsByIdContextEnum;
(function (GetWpV2PostsByParentRevisionsByIdContextEnum) {
    GetWpV2PostsByParentRevisionsByIdContextEnum["View"] = "view";
    GetWpV2PostsByParentRevisionsByIdContextEnum["Embed"] = "embed";
    GetWpV2PostsByParentRevisionsByIdContextEnum["Edit"] = "edit";
})(GetWpV2PostsByParentRevisionsByIdContextEnum || (GetWpV2PostsByParentRevisionsByIdContextEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var GetWpV2SearchContextEnum;
(function (GetWpV2SearchContextEnum) {
    GetWpV2SearchContextEnum["View"] = "view";
    GetWpV2SearchContextEnum["Embed"] = "embed";
})(GetWpV2SearchContextEnum || (GetWpV2SearchContextEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var GetWpV2SearchTypeEnum;
(function (GetWpV2SearchTypeEnum) {
    GetWpV2SearchTypeEnum["Post"] = "post";
})(GetWpV2SearchTypeEnum || (GetWpV2SearchTypeEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var GetWpV2StatusesContextEnum;
(function (GetWpV2StatusesContextEnum) {
    GetWpV2StatusesContextEnum["View"] = "view";
    GetWpV2StatusesContextEnum["Embed"] = "embed";
    GetWpV2StatusesContextEnum["Edit"] = "edit";
})(GetWpV2StatusesContextEnum || (GetWpV2StatusesContextEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var GetWpV2StatusesByStatusContextEnum;
(function (GetWpV2StatusesByStatusContextEnum) {
    GetWpV2StatusesByStatusContextEnum["View"] = "view";
    GetWpV2StatusesByStatusContextEnum["Embed"] = "embed";
    GetWpV2StatusesByStatusContextEnum["Edit"] = "edit";
})(GetWpV2StatusesByStatusContextEnum || (GetWpV2StatusesByStatusContextEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var GetWpV2TagsContextEnum;
(function (GetWpV2TagsContextEnum) {
    GetWpV2TagsContextEnum["View"] = "view";
    GetWpV2TagsContextEnum["Embed"] = "embed";
    GetWpV2TagsContextEnum["Edit"] = "edit";
})(GetWpV2TagsContextEnum || (GetWpV2TagsContextEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var GetWpV2TagsOrderEnum;
(function (GetWpV2TagsOrderEnum) {
    GetWpV2TagsOrderEnum["Asc"] = "asc";
    GetWpV2TagsOrderEnum["Desc"] = "desc";
})(GetWpV2TagsOrderEnum || (GetWpV2TagsOrderEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var GetWpV2TagsOrderbyEnum;
(function (GetWpV2TagsOrderbyEnum) {
    GetWpV2TagsOrderbyEnum["Id"] = "id";
    GetWpV2TagsOrderbyEnum["Include"] = "include";
    GetWpV2TagsOrderbyEnum["Name"] = "name";
    GetWpV2TagsOrderbyEnum["Slug"] = "slug";
    GetWpV2TagsOrderbyEnum["IncludeSlugs"] = "include_slugs";
    GetWpV2TagsOrderbyEnum["TermGroup"] = "term_group";
    GetWpV2TagsOrderbyEnum["Description"] = "description";
    GetWpV2TagsOrderbyEnum["Count"] = "count";
})(GetWpV2TagsOrderbyEnum || (GetWpV2TagsOrderbyEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var GetWpV2TagsByIdContextEnum;
(function (GetWpV2TagsByIdContextEnum) {
    GetWpV2TagsByIdContextEnum["View"] = "view";
    GetWpV2TagsByIdContextEnum["Embed"] = "embed";
    GetWpV2TagsByIdContextEnum["Edit"] = "edit";
})(GetWpV2TagsByIdContextEnum || (GetWpV2TagsByIdContextEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var GetWpV2TaxonomiesContextEnum;
(function (GetWpV2TaxonomiesContextEnum) {
    GetWpV2TaxonomiesContextEnum["View"] = "view";
    GetWpV2TaxonomiesContextEnum["Embed"] = "embed";
    GetWpV2TaxonomiesContextEnum["Edit"] = "edit";
})(GetWpV2TaxonomiesContextEnum || (GetWpV2TaxonomiesContextEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var GetWpV2TaxonomiesByTaxonomyContextEnum;
(function (GetWpV2TaxonomiesByTaxonomyContextEnum) {
    GetWpV2TaxonomiesByTaxonomyContextEnum["View"] = "view";
    GetWpV2TaxonomiesByTaxonomyContextEnum["Embed"] = "embed";
    GetWpV2TaxonomiesByTaxonomyContextEnum["Edit"] = "edit";
})(GetWpV2TaxonomiesByTaxonomyContextEnum || (GetWpV2TaxonomiesByTaxonomyContextEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var GetWpV2TypesContextEnum;
(function (GetWpV2TypesContextEnum) {
    GetWpV2TypesContextEnum["View"] = "view";
    GetWpV2TypesContextEnum["Embed"] = "embed";
    GetWpV2TypesContextEnum["Edit"] = "edit";
})(GetWpV2TypesContextEnum || (GetWpV2TypesContextEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var GetWpV2TypesByTypeContextEnum;
(function (GetWpV2TypesByTypeContextEnum) {
    GetWpV2TypesByTypeContextEnum["View"] = "view";
    GetWpV2TypesByTypeContextEnum["Embed"] = "embed";
    GetWpV2TypesByTypeContextEnum["Edit"] = "edit";
})(GetWpV2TypesByTypeContextEnum || (GetWpV2TypesByTypeContextEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var GetWpV2UsersContextEnum;
(function (GetWpV2UsersContextEnum) {
    GetWpV2UsersContextEnum["View"] = "view";
    GetWpV2UsersContextEnum["Embed"] = "embed";
    GetWpV2UsersContextEnum["Edit"] = "edit";
})(GetWpV2UsersContextEnum || (GetWpV2UsersContextEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var GetWpV2UsersOrderEnum;
(function (GetWpV2UsersOrderEnum) {
    GetWpV2UsersOrderEnum["Asc"] = "asc";
    GetWpV2UsersOrderEnum["Desc"] = "desc";
})(GetWpV2UsersOrderEnum || (GetWpV2UsersOrderEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var GetWpV2UsersOrderbyEnum;
(function (GetWpV2UsersOrderbyEnum) {
    GetWpV2UsersOrderbyEnum["Id"] = "id";
    GetWpV2UsersOrderbyEnum["Include"] = "include";
    GetWpV2UsersOrderbyEnum["Name"] = "name";
    GetWpV2UsersOrderbyEnum["RegisteredDate"] = "registered_date";
    GetWpV2UsersOrderbyEnum["Slug"] = "slug";
    GetWpV2UsersOrderbyEnum["IncludeSlugs"] = "include_slugs";
    GetWpV2UsersOrderbyEnum["Email"] = "email";
    GetWpV2UsersOrderbyEnum["Url"] = "url";
})(GetWpV2UsersOrderbyEnum || (GetWpV2UsersOrderbyEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var GetWpV2UsersWhoEnum;
(function (GetWpV2UsersWhoEnum) {
    GetWpV2UsersWhoEnum["Authors"] = "authors";
})(GetWpV2UsersWhoEnum || (GetWpV2UsersWhoEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var GetWpV2UsersByIdContextEnum;
(function (GetWpV2UsersByIdContextEnum) {
    GetWpV2UsersByIdContextEnum["View"] = "view";
    GetWpV2UsersByIdContextEnum["Embed"] = "embed";
    GetWpV2UsersByIdContextEnum["Edit"] = "edit";
})(GetWpV2UsersByIdContextEnum || (GetWpV2UsersByIdContextEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var GetWpV2UsersMeContextEnum;
(function (GetWpV2UsersMeContextEnum) {
    GetWpV2UsersMeContextEnum["View"] = "view";
    GetWpV2UsersMeContextEnum["Embed"] = "embed";
    GetWpV2UsersMeContextEnum["Edit"] = "edit";
})(GetWpV2UsersMeContextEnum || (GetWpV2UsersMeContextEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var PostWpV2BlocksStatusEnum;
(function (PostWpV2BlocksStatusEnum) {
    PostWpV2BlocksStatusEnum["Publish"] = "publish";
    PostWpV2BlocksStatusEnum["Future"] = "future";
    PostWpV2BlocksStatusEnum["Draft"] = "draft";
    PostWpV2BlocksStatusEnum["Pending"] = "pending";
    PostWpV2BlocksStatusEnum["Private"] = "private";
})(PostWpV2BlocksStatusEnum || (PostWpV2BlocksStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var PostWpV2BlocksByIdStatusEnum;
(function (PostWpV2BlocksByIdStatusEnum) {
    PostWpV2BlocksByIdStatusEnum["Publish"] = "publish";
    PostWpV2BlocksByIdStatusEnum["Future"] = "future";
    PostWpV2BlocksByIdStatusEnum["Draft"] = "draft";
    PostWpV2BlocksByIdStatusEnum["Pending"] = "pending";
    PostWpV2BlocksByIdStatusEnum["Private"] = "private";
})(PostWpV2BlocksByIdStatusEnum || (PostWpV2BlocksByIdStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var PostWpV2BlocksByIdAutosavesStatusEnum;
(function (PostWpV2BlocksByIdAutosavesStatusEnum) {
    PostWpV2BlocksByIdAutosavesStatusEnum["Publish"] = "publish";
    PostWpV2BlocksByIdAutosavesStatusEnum["Future"] = "future";
    PostWpV2BlocksByIdAutosavesStatusEnum["Draft"] = "draft";
    PostWpV2BlocksByIdAutosavesStatusEnum["Pending"] = "pending";
    PostWpV2BlocksByIdAutosavesStatusEnum["Private"] = "private";
})(PostWpV2BlocksByIdAutosavesStatusEnum || (PostWpV2BlocksByIdAutosavesStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var PostWpV2MediaStatusEnum;
(function (PostWpV2MediaStatusEnum) {
    PostWpV2MediaStatusEnum["Publish"] = "publish";
    PostWpV2MediaStatusEnum["Future"] = "future";
    PostWpV2MediaStatusEnum["Draft"] = "draft";
    PostWpV2MediaStatusEnum["Pending"] = "pending";
    PostWpV2MediaStatusEnum["Private"] = "private";
})(PostWpV2MediaStatusEnum || (PostWpV2MediaStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var PostWpV2MediaCommentStatusEnum;
(function (PostWpV2MediaCommentStatusEnum) {
    PostWpV2MediaCommentStatusEnum["Open"] = "open";
    PostWpV2MediaCommentStatusEnum["Closed"] = "closed";
})(PostWpV2MediaCommentStatusEnum || (PostWpV2MediaCommentStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var PostWpV2MediaPingStatusEnum;
(function (PostWpV2MediaPingStatusEnum) {
    PostWpV2MediaPingStatusEnum["Open"] = "open";
    PostWpV2MediaPingStatusEnum["Closed"] = "closed";
})(PostWpV2MediaPingStatusEnum || (PostWpV2MediaPingStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var PostWpV2MediaByIdStatusEnum;
(function (PostWpV2MediaByIdStatusEnum) {
    PostWpV2MediaByIdStatusEnum["Publish"] = "publish";
    PostWpV2MediaByIdStatusEnum["Future"] = "future";
    PostWpV2MediaByIdStatusEnum["Draft"] = "draft";
    PostWpV2MediaByIdStatusEnum["Pending"] = "pending";
    PostWpV2MediaByIdStatusEnum["Private"] = "private";
})(PostWpV2MediaByIdStatusEnum || (PostWpV2MediaByIdStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var PostWpV2MediaByIdCommentStatusEnum;
(function (PostWpV2MediaByIdCommentStatusEnum) {
    PostWpV2MediaByIdCommentStatusEnum["Open"] = "open";
    PostWpV2MediaByIdCommentStatusEnum["Closed"] = "closed";
})(PostWpV2MediaByIdCommentStatusEnum || (PostWpV2MediaByIdCommentStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var PostWpV2MediaByIdPingStatusEnum;
(function (PostWpV2MediaByIdPingStatusEnum) {
    PostWpV2MediaByIdPingStatusEnum["Open"] = "open";
    PostWpV2MediaByIdPingStatusEnum["Closed"] = "closed";
})(PostWpV2MediaByIdPingStatusEnum || (PostWpV2MediaByIdPingStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var PostWpV2PagesStatusEnum;
(function (PostWpV2PagesStatusEnum) {
    PostWpV2PagesStatusEnum["Publish"] = "publish";
    PostWpV2PagesStatusEnum["Future"] = "future";
    PostWpV2PagesStatusEnum["Draft"] = "draft";
    PostWpV2PagesStatusEnum["Pending"] = "pending";
    PostWpV2PagesStatusEnum["Private"] = "private";
})(PostWpV2PagesStatusEnum || (PostWpV2PagesStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var PostWpV2PagesCommentStatusEnum;
(function (PostWpV2PagesCommentStatusEnum) {
    PostWpV2PagesCommentStatusEnum["Open"] = "open";
    PostWpV2PagesCommentStatusEnum["Closed"] = "closed";
})(PostWpV2PagesCommentStatusEnum || (PostWpV2PagesCommentStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var PostWpV2PagesPingStatusEnum;
(function (PostWpV2PagesPingStatusEnum) {
    PostWpV2PagesPingStatusEnum["Open"] = "open";
    PostWpV2PagesPingStatusEnum["Closed"] = "closed";
})(PostWpV2PagesPingStatusEnum || (PostWpV2PagesPingStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var PostWpV2PagesByIdStatusEnum;
(function (PostWpV2PagesByIdStatusEnum) {
    PostWpV2PagesByIdStatusEnum["Publish"] = "publish";
    PostWpV2PagesByIdStatusEnum["Future"] = "future";
    PostWpV2PagesByIdStatusEnum["Draft"] = "draft";
    PostWpV2PagesByIdStatusEnum["Pending"] = "pending";
    PostWpV2PagesByIdStatusEnum["Private"] = "private";
})(PostWpV2PagesByIdStatusEnum || (PostWpV2PagesByIdStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var PostWpV2PagesByIdCommentStatusEnum;
(function (PostWpV2PagesByIdCommentStatusEnum) {
    PostWpV2PagesByIdCommentStatusEnum["Open"] = "open";
    PostWpV2PagesByIdCommentStatusEnum["Closed"] = "closed";
})(PostWpV2PagesByIdCommentStatusEnum || (PostWpV2PagesByIdCommentStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var PostWpV2PagesByIdPingStatusEnum;
(function (PostWpV2PagesByIdPingStatusEnum) {
    PostWpV2PagesByIdPingStatusEnum["Open"] = "open";
    PostWpV2PagesByIdPingStatusEnum["Closed"] = "closed";
})(PostWpV2PagesByIdPingStatusEnum || (PostWpV2PagesByIdPingStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var PostWpV2PagesByIdAutosavesStatusEnum;
(function (PostWpV2PagesByIdAutosavesStatusEnum) {
    PostWpV2PagesByIdAutosavesStatusEnum["Publish"] = "publish";
    PostWpV2PagesByIdAutosavesStatusEnum["Future"] = "future";
    PostWpV2PagesByIdAutosavesStatusEnum["Draft"] = "draft";
    PostWpV2PagesByIdAutosavesStatusEnum["Pending"] = "pending";
    PostWpV2PagesByIdAutosavesStatusEnum["Private"] = "private";
})(PostWpV2PagesByIdAutosavesStatusEnum || (PostWpV2PagesByIdAutosavesStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var PostWpV2PagesByIdAutosavesCommentStatusEnum;
(function (PostWpV2PagesByIdAutosavesCommentStatusEnum) {
    PostWpV2PagesByIdAutosavesCommentStatusEnum["Open"] = "open";
    PostWpV2PagesByIdAutosavesCommentStatusEnum["Closed"] = "closed";
})(PostWpV2PagesByIdAutosavesCommentStatusEnum || (PostWpV2PagesByIdAutosavesCommentStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var PostWpV2PagesByIdAutosavesPingStatusEnum;
(function (PostWpV2PagesByIdAutosavesPingStatusEnum) {
    PostWpV2PagesByIdAutosavesPingStatusEnum["Open"] = "open";
    PostWpV2PagesByIdAutosavesPingStatusEnum["Closed"] = "closed";
})(PostWpV2PagesByIdAutosavesPingStatusEnum || (PostWpV2PagesByIdAutosavesPingStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var PostWpV2PostsStatusEnum;
(function (PostWpV2PostsStatusEnum) {
    PostWpV2PostsStatusEnum["Publish"] = "publish";
    PostWpV2PostsStatusEnum["Future"] = "future";
    PostWpV2PostsStatusEnum["Draft"] = "draft";
    PostWpV2PostsStatusEnum["Pending"] = "pending";
    PostWpV2PostsStatusEnum["Private"] = "private";
})(PostWpV2PostsStatusEnum || (PostWpV2PostsStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var PostWpV2PostsCommentStatusEnum;
(function (PostWpV2PostsCommentStatusEnum) {
    PostWpV2PostsCommentStatusEnum["Open"] = "open";
    PostWpV2PostsCommentStatusEnum["Closed"] = "closed";
})(PostWpV2PostsCommentStatusEnum || (PostWpV2PostsCommentStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var PostWpV2PostsPingStatusEnum;
(function (PostWpV2PostsPingStatusEnum) {
    PostWpV2PostsPingStatusEnum["Open"] = "open";
    PostWpV2PostsPingStatusEnum["Closed"] = "closed";
})(PostWpV2PostsPingStatusEnum || (PostWpV2PostsPingStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var PostWpV2PostsFormatEnum;
(function (PostWpV2PostsFormatEnum) {
    PostWpV2PostsFormatEnum["Standard"] = "standard";
    PostWpV2PostsFormatEnum["Aside"] = "aside";
    PostWpV2PostsFormatEnum["Chat"] = "chat";
    PostWpV2PostsFormatEnum["Gallery"] = "gallery";
    PostWpV2PostsFormatEnum["Link"] = "link";
    PostWpV2PostsFormatEnum["Image"] = "image";
    PostWpV2PostsFormatEnum["Quote"] = "quote";
    PostWpV2PostsFormatEnum["Status"] = "status";
    PostWpV2PostsFormatEnum["Video"] = "video";
    PostWpV2PostsFormatEnum["Audio"] = "audio";
})(PostWpV2PostsFormatEnum || (PostWpV2PostsFormatEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var PostWpV2PostsByIdStatusEnum;
(function (PostWpV2PostsByIdStatusEnum) {
    PostWpV2PostsByIdStatusEnum["Publish"] = "publish";
    PostWpV2PostsByIdStatusEnum["Future"] = "future";
    PostWpV2PostsByIdStatusEnum["Draft"] = "draft";
    PostWpV2PostsByIdStatusEnum["Pending"] = "pending";
    PostWpV2PostsByIdStatusEnum["Private"] = "private";
})(PostWpV2PostsByIdStatusEnum || (PostWpV2PostsByIdStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var PostWpV2PostsByIdCommentStatusEnum;
(function (PostWpV2PostsByIdCommentStatusEnum) {
    PostWpV2PostsByIdCommentStatusEnum["Open"] = "open";
    PostWpV2PostsByIdCommentStatusEnum["Closed"] = "closed";
})(PostWpV2PostsByIdCommentStatusEnum || (PostWpV2PostsByIdCommentStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var PostWpV2PostsByIdPingStatusEnum;
(function (PostWpV2PostsByIdPingStatusEnum) {
    PostWpV2PostsByIdPingStatusEnum["Open"] = "open";
    PostWpV2PostsByIdPingStatusEnum["Closed"] = "closed";
})(PostWpV2PostsByIdPingStatusEnum || (PostWpV2PostsByIdPingStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var PostWpV2PostsByIdFormatEnum;
(function (PostWpV2PostsByIdFormatEnum) {
    PostWpV2PostsByIdFormatEnum["Standard"] = "standard";
    PostWpV2PostsByIdFormatEnum["Aside"] = "aside";
    PostWpV2PostsByIdFormatEnum["Chat"] = "chat";
    PostWpV2PostsByIdFormatEnum["Gallery"] = "gallery";
    PostWpV2PostsByIdFormatEnum["Link"] = "link";
    PostWpV2PostsByIdFormatEnum["Image"] = "image";
    PostWpV2PostsByIdFormatEnum["Quote"] = "quote";
    PostWpV2PostsByIdFormatEnum["Status"] = "status";
    PostWpV2PostsByIdFormatEnum["Video"] = "video";
    PostWpV2PostsByIdFormatEnum["Audio"] = "audio";
})(PostWpV2PostsByIdFormatEnum || (PostWpV2PostsByIdFormatEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var PostWpV2PostsByIdAutosavesStatusEnum;
(function (PostWpV2PostsByIdAutosavesStatusEnum) {
    PostWpV2PostsByIdAutosavesStatusEnum["Publish"] = "publish";
    PostWpV2PostsByIdAutosavesStatusEnum["Future"] = "future";
    PostWpV2PostsByIdAutosavesStatusEnum["Draft"] = "draft";
    PostWpV2PostsByIdAutosavesStatusEnum["Pending"] = "pending";
    PostWpV2PostsByIdAutosavesStatusEnum["Private"] = "private";
})(PostWpV2PostsByIdAutosavesStatusEnum || (PostWpV2PostsByIdAutosavesStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var PostWpV2PostsByIdAutosavesCommentStatusEnum;
(function (PostWpV2PostsByIdAutosavesCommentStatusEnum) {
    PostWpV2PostsByIdAutosavesCommentStatusEnum["Open"] = "open";
    PostWpV2PostsByIdAutosavesCommentStatusEnum["Closed"] = "closed";
})(PostWpV2PostsByIdAutosavesCommentStatusEnum || (PostWpV2PostsByIdAutosavesCommentStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var PostWpV2PostsByIdAutosavesPingStatusEnum;
(function (PostWpV2PostsByIdAutosavesPingStatusEnum) {
    PostWpV2PostsByIdAutosavesPingStatusEnum["Open"] = "open";
    PostWpV2PostsByIdAutosavesPingStatusEnum["Closed"] = "closed";
})(PostWpV2PostsByIdAutosavesPingStatusEnum || (PostWpV2PostsByIdAutosavesPingStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var PostWpV2PostsByIdAutosavesFormatEnum;
(function (PostWpV2PostsByIdAutosavesFormatEnum) {
    PostWpV2PostsByIdAutosavesFormatEnum["Standard"] = "standard";
    PostWpV2PostsByIdAutosavesFormatEnum["Aside"] = "aside";
    PostWpV2PostsByIdAutosavesFormatEnum["Chat"] = "chat";
    PostWpV2PostsByIdAutosavesFormatEnum["Gallery"] = "gallery";
    PostWpV2PostsByIdAutosavesFormatEnum["Link"] = "link";
    PostWpV2PostsByIdAutosavesFormatEnum["Image"] = "image";
    PostWpV2PostsByIdAutosavesFormatEnum["Quote"] = "quote";
    PostWpV2PostsByIdAutosavesFormatEnum["Status"] = "status";
    PostWpV2PostsByIdAutosavesFormatEnum["Video"] = "video";
    PostWpV2PostsByIdAutosavesFormatEnum["Audio"] = "audio";
})(PostWpV2PostsByIdAutosavesFormatEnum || (PostWpV2PostsByIdAutosavesFormatEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var PostWpV2SettingsDefaultPingStatusEnum;
(function (PostWpV2SettingsDefaultPingStatusEnum) {
    PostWpV2SettingsDefaultPingStatusEnum["Open"] = "open";
    PostWpV2SettingsDefaultPingStatusEnum["Closed"] = "closed";
})(PostWpV2SettingsDefaultPingStatusEnum || (PostWpV2SettingsDefaultPingStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var PostWpV2SettingsDefaultCommentStatusEnum;
(function (PostWpV2SettingsDefaultCommentStatusEnum) {
    PostWpV2SettingsDefaultCommentStatusEnum["Open"] = "open";
    PostWpV2SettingsDefaultCommentStatusEnum["Closed"] = "closed";
})(PostWpV2SettingsDefaultCommentStatusEnum || (PostWpV2SettingsDefaultCommentStatusEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var PostWpV2UsersLocaleEnum;
(function (PostWpV2UsersLocaleEnum) {
    PostWpV2UsersLocaleEnum["Empty"] = "";
    PostWpV2UsersLocaleEnum["EnUS"] = "en_US";
})(PostWpV2UsersLocaleEnum || (PostWpV2UsersLocaleEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var PostWpV2UsersByIdLocaleEnum;
(function (PostWpV2UsersByIdLocaleEnum) {
    PostWpV2UsersByIdLocaleEnum["Empty"] = "";
    PostWpV2UsersByIdLocaleEnum["EnUS"] = "en_US";
})(PostWpV2UsersByIdLocaleEnum || (PostWpV2UsersByIdLocaleEnum = {}));
/**
    * @export
    * @enum {string}
    */
export var PostWpV2UsersMeLocaleEnum;
(function (PostWpV2UsersMeLocaleEnum) {
    PostWpV2UsersMeLocaleEnum["Empty"] = "";
    PostWpV2UsersMeLocaleEnum["EnUS"] = "en_US";
})(PostWpV2UsersMeLocaleEnum || (PostWpV2UsersMeLocaleEnum = {}));
//# sourceMappingURL=DefaultApi.js.map